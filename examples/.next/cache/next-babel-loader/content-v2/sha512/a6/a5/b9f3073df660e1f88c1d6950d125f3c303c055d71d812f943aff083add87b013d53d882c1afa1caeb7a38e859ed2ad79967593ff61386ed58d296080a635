{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\new\\\\ResidenceFormView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useState } from 'react';\nimport { FormView, isValidId } from 'material-ui-forms';\nimport residencesController from '../../../controllers/ResidenceController';\nimport { ResidenceForm } from './ResidenceForm';\nexport class Test2 {\n  constructor() {\n    _defineProperty(this, \"forms\", []);\n  }\n\n  writeForms() {\n    console.log(\"test\", this.forms);\n  }\n\n}\nexport class Test {\n  //uuid = Number.MAX_SAFE_INTEGER;\n  constructor() //public controller: IRepoController<T>,\n  //public setForms: React.Dispatch<React.SetStateAction<T[]>>,\n  //public key: string,\n  //public propertyKeyIndex = 0,\n  {//console.log(this.key)\n    //this.forms = []\n    //console.log(this.forms)\n\n    _defineProperty(this, \"forms\", []);\n\n    _defineProperty(this, \"handleGenerateKey\", item => {\n      //@ts-ignore\n      return `Residence${item[this.key]}`;\n    });\n  }\n\n  async handleLoad(local, data) {\n    /*\r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      //console.log(this.controller);\r\n      //const residences = await this.controller.getAll();\r\n      //if (!residences) return false;\r\n      //this.setForms(residences);\r\n    }\r\n    return true;\r\n    */\n    return true;\n  }\n\n  async handleAddNewItem() {\n    //this.forms = []\n    console.log(this.forms); //@ts-ignore\n    //this.forms.push({ [this.key]: this.uuid  });\n    //this.uuid -= 1;\n    //this.setForms([...this.forms]);\n  }\n\n  async handleSaveChanges() {\n    //console.log(this.forms)\n    //this.setForms([...this.forms]);\n    return true;\n  }\n\n  async handleDelete(index) {\n    //@ts-ignore\n    const objId = this.forms[index][this.key]; //if (objId !== undefined && isValidId(objId)) {\n    //const response = await residencesController.delete(objId);\n    //if (!response) { return false; }\n    //}\n\n    setTimeout(() => {//@ts-ignore\n      //const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\n      //console.log(filteredResults);\n      //this.setForms(filteredResults);\n    });\n    return true;\n  }\n\n}\nexport default function ResidenceFormView(props) {\n  //const tester = {} as Residence;\n  //console.log(Object.keys(tester))\n  const {\n    0: forms,\n    1: setForms\n  } = useState([]);\n  const obj = new Test(); //(residencesController, setForms, \"residenceId\");\n\n  obj.handleAddNewItem();\n  const test = useRef(obj);\n\n  const handleSubmit = async () => {\n    let success = true;\n    forms.forEach(async (residence, index) => {\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\n        if (!(await handleUpdate(residence.residenceId, residence))) {\n          success = false;\n        }\n      } else {\n        if (!(await handleCreate(index, residence))) {\n          success = false;\n        }\n      }\n    });\n    return success;\n  };\n\n  const handleCreate = async (index, residence) => {\n    const residenceResponse = await residencesController.create(_objectSpread(_objectSpread({}, residence), {}, {\n      residenceId: undefined\n    }));\n\n    if (residenceResponse) {\n      //Flush Forms temp key for real key\n      const tForms = forms;\n      tForms[index] = residenceResponse;\n      setForms([]);\n      setForms(tForms);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleUpdate = async (id, residence) => {\n    const response = await residencesController.update(id, residence);\n    return response;\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormView, {\n    FormElement: ResidenceForm,\n    title: \"Residences\",\n    minNodes: 1,\n    maxNodes: 3,\n    forms: forms,\n    handleLoad: test.current.handleLoad,\n    handleSubmit: handleSubmit,\n    handleAddNewItem: test.current.handleAddNewItem,\n    handleSaveChanges: test.current.handleSaveChanges,\n    handleDelete: test.current.handleDelete,\n    handleGenerateKey: test.current.handleGenerateKey,\n    defaultLocked: props.defaultLocked,\n    submitButtonRef: props.submitButtonRef,\n    onNext: props.onNext,\n    hideLockButton: props.hideLockButton,\n    hideSaveProgressButton: props.hideSaveProgressButton,\n    hidePrintButton: props.hidePrintButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/ResidenceFormView.tsx"],"names":["React","useRef","useState","FormView","isValidId","residencesController","ResidenceForm","Test2","writeForms","console","log","forms","Test","constructor","item","key","handleLoad","local","data","handleAddNewItem","handleSaveChanges","handleDelete","index","objId","setTimeout","ResidenceFormView","props","setForms","obj","test","handleSubmit","success","forEach","residence","residenceId","undefined","handleUpdate","handleCreate","residenceResponse","create","tForms","id","response","update","current","handleGenerateKey","defaultLocked","submitButtonRef","onNext","hideLockButton","hideSaveProgressButton","hidePrintButton"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { IFormViewProps, FormView, isValidId } from 'material-ui-forms';\r\nimport Residence from '../../../models/Residence';\r\nimport residencesController, { IRepoController } from '../../../controllers/ResidenceController';\r\nimport { ResidenceForm } from './ResidenceForm';\r\n\r\nexport interface Test<T> {\r\n  handleLoad(local: boolean, data?: any): Promise<boolean>;\r\n\r\n}\r\n\r\nexport class Test2<T> {\r\n  forms = [];\r\n\r\n  writeForms() {\r\n    console.log(\"test\", this.forms)\r\n  }\r\n}\r\n\r\nexport class Test<T> {\r\n\r\n  forms = [];\r\n  //uuid = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(\r\n    //public controller: IRepoController<T>,\r\n    //public setForms: React.Dispatch<React.SetStateAction<T[]>>,\r\n    //public key: string,\r\n    //public propertyKeyIndex = 0,\r\n    ) {\r\n      //console.log(this.key)\r\n\r\n      //this.forms = []\r\n      //console.log(this.forms)\r\n\r\n    }\r\n\r\n  async handleLoad(local: boolean, data?: any) {\r\n    /*\r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      //console.log(this.controller);\r\n      //const residences = await this.controller.getAll();\r\n      //if (!residences) return false;\r\n      //this.setForms(residences);\r\n    }\r\n    return true;\r\n    */\r\n   return true;\r\n  }\r\n\r\n  \r\n  async handleAddNewItem() {\r\n    //this.forms = []\r\n    console.log(this.forms);\r\n    //@ts-ignore\r\n    //this.forms.push({ [this.key]: this.uuid  });\r\n    //this.uuid -= 1;\r\n    //this.setForms([...this.forms]);\r\n  }\r\n\r\n  async handleSaveChanges() : Promise<boolean> {\r\n    //console.log(this.forms)\r\n    //this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `Residence${item[this.key]}`;\r\n  }\r\n\r\n  async handleDelete(index: number): Promise<boolean> {\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.key];\r\n\r\n    //if (objId !== undefined && isValidId(objId)) {\r\n      //const response = await residencesController.delete(objId);\r\n      //if (!response) { return false; }\r\n    //}\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      //const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\r\n      //console.log(filteredResults);\r\n      //this.setForms(filteredResults);\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  //const tester = {} as Residence;\r\n  //console.log(Object.keys(tester))\r\n\r\n  const [forms, setForms] = useState([] as Residence[]);\r\n\r\n  const obj = new Test<Residence>();//(residencesController, setForms, \"residenceId\");\r\n  obj.handleAddNewItem();\r\n  \r\n  const test = useRef(obj)\r\n\r\n  const handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    forms.forEach(async (residence, index) => {\r\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\r\n        if (!await handleUpdate(residence.residenceId, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await handleCreate(index, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  const handleCreate = async (index: number, residence: Residence): Promise<boolean> => {\r\n    const residenceResponse = await residencesController.create({ ...residence, residenceId: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n      const tForms = forms;\r\n      tForms[index] = residenceResponse\r\n      setForms([])\r\n      setForms(tForms);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const handleUpdate = async (id: number, residence: Residence): Promise<boolean> => {\r\n    const response = await residencesController.update(id, residence);\r\n    return response;\r\n  }\r\n\r\n  return (\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={forms}\r\n      handleLoad={test.current.handleLoad}\r\n      handleSubmit={handleSubmit}\r\n      handleAddNewItem={test.current.handleAddNewItem}\r\n      handleSaveChanges={test.current.handleSaveChanges}\r\n      handleDelete={test.current.handleDelete}\r\n      handleGenerateKey={test.current.handleGenerateKey}\r\n\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}