{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\new\\\\ResidenceFormView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { FormView, isValidId } from 'material-ui-forms';\nimport residencesController from '../../../controllers/ResidenceController';\nimport { ResidenceForm } from './ResidenceForm';\nexport class Test {\n  constructor(controller, setForms, key, propertyKeyIndex = 0) {\n    this.controller = controller;\n    this.setForms = setForms;\n    this.key = key;\n    this.propertyKeyIndex = propertyKeyIndex;\n\n    _defineProperty(this, \"forms\", []);\n\n    _defineProperty(this, \"uuid\", Number.MAX_SAFE_INTEGER);\n\n    _defineProperty(this, \"handleGenerateKey\", item => {\n      //@ts-ignore\n      return `Residence${item[this.key]}`;\n    });\n\n    console.log(this.key);\n  }\n\n  async handleLoad(local, data) {\n    if (local && data) {\n      this.forms = data;\n    } else {//console.log(this.controller);\n      //const residences = await this.controller.getAll();\n      //if (!residences) return false;\n      //this.setForms(residences);\n    }\n\n    return true;\n  }\n\n  async handleAddNewItem() {\n    console.log(this.forms); //@ts-ignore\n\n    this.forms.push({\n      [this.key]: this.uuid\n    });\n    this.uuid -= 1;\n    this.setForms([...this.forms]);\n  }\n\n  async handleSaveChanges() {\n    console.log(this.forms);\n    this.setForms([...this.forms]);\n    return true;\n  }\n\n  async handleDelete(index) {\n    //@ts-ignore\n    const objId = this.forms[index][this.key];\n\n    if (objId !== undefined && isValidId(objId)) {\n      const response = await residencesController.delete(objId);\n\n      if (!response) {\n        return false;\n      }\n    }\n\n    setTimeout(() => {\n      //@ts-ignore\n      const filteredResults = this.forms.filter(item => item[this.key] !== objId);\n      console.log(filteredResults);\n      this.setForms(filteredResults);\n    });\n    return true;\n  }\n\n}\nexport default function ResidenceFormView(props) {\n  //const tester = {} as Residence;\n  //console.log(Object.keys(tester))\n  const {\n    0: forms,\n    1: setForms\n  } = useState([]);\n  const test = new Test(residencesController, setForms, \"residenceId\");\n\n  const handleSubmit = async () => {\n    let success = true;\n    forms.forEach(async (residence, index) => {\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\n        if (!(await handleUpdate(residence.residenceId, residence))) {\n          success = false;\n        }\n      } else {\n        if (!(await handleCreate(index, residence))) {\n          success = false;\n        }\n      }\n    });\n    return success;\n  };\n\n  const handleCreate = async (index, residence) => {\n    const residenceResponse = await residencesController.create(_objectSpread(_objectSpread({}, residence), {}, {\n      residenceId: undefined\n    }));\n\n    if (residenceResponse) {\n      //Flush Forms temp key for real key\n      const tForms = forms;\n      tForms[index] = residenceResponse;\n      setForms([]);\n      setForms(tForms);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleUpdate = async (id, residence) => {\n    const response = await residencesController.update(id, residence);\n    return response;\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormView, {\n    FormElement: ResidenceForm,\n    title: \"Residences\",\n    minNodes: 1,\n    maxNodes: 3,\n    forms: forms,\n    handleLoad: test.handleLoad,\n    handleSubmit: handleSubmit,\n    handleAddNewItem: test.handleAddNewItem,\n    handleSaveChanges: test.handleSaveChanges,\n    handleDelete: test.handleDelete,\n    handleGenerateKey: test.handleGenerateKey,\n    defaultLocked: props.defaultLocked,\n    submitButtonRef: props.submitButtonRef,\n    onNext: props.onNext,\n    hideLockButton: props.hideLockButton,\n    hideSaveProgressButton: props.hideSaveProgressButton,\n    hidePrintButton: props.hidePrintButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/ResidenceFormView.tsx"],"names":["React","useState","FormView","isValidId","residencesController","ResidenceForm","Test","constructor","controller","setForms","key","propertyKeyIndex","Number","MAX_SAFE_INTEGER","item","console","log","handleLoad","local","data","forms","handleAddNewItem","push","uuid","handleSaveChanges","handleDelete","index","objId","undefined","response","delete","setTimeout","filteredResults","filter","ResidenceFormView","props","test","handleSubmit","success","forEach","residence","residenceId","handleUpdate","handleCreate","residenceResponse","create","tForms","id","update","handleGenerateKey","defaultLocked","submitButtonRef","onNext","hideLockButton","hideSaveProgressButton","hidePrintButton"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAyBC,QAAzB,EAAmCC,SAAnC,QAAoD,mBAApD;AAEA,OAAOC,oBAAP,MAAsD,0CAAtD;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAOA,OAAO,MAAMC,IAAN,CAAc;AAInBC,EAAAA,WAAW,CACFC,UADE,EAEFC,QAFE,EAGFC,GAHE,EAIFC,gBAAgB,GAAG,CAJjB,EAKP;AAAA,SAJKH,UAIL,GAJKA,UAIL;AAAA,SAHKC,QAGL,GAHKA,QAGL;AAAA,SAFKC,GAEL,GAFKA,GAEL;AAAA,SADKC,gBACL,GADKA,gBACL;;AAAA,mCARS,EAQT;;AAAA,kCAPGC,MAAM,CAACC,gBAOV;;AAAA,+CA+BiBC,IAAD,IAAa;AAC/B;AACA,aAAQ,YAAWA,IAAI,CAAC,KAAKJ,GAAN,CAAW,EAAlC;AACD,KAlCG;;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,GAAjB;AACD;;AAEH,QAAMO,UAAN,CAAiBC,KAAjB,EAAiCC,IAAjC,EAA6C;AAC3C,QAAID,KAAK,IAAIC,IAAb,EAAmB;AACjB,WAAKC,KAAL,GAAaD,IAAb;AACD,KAFD,MAGK,CACH;AACA;AACA;AACA;AACD;;AACD,WAAO,IAAP;AACD;;AAED,QAAME,gBAAN,GAAyB;AACvBN,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAjB,EADuB,CAEvB;;AACA,SAAKA,KAAL,CAAWE,IAAX,CAAgB;AAAE,OAAC,KAAKZ,GAAN,GAAY,KAAKa;AAAnB,KAAhB;AACA,SAAKA,IAAL,IAAa,CAAb;AACA,SAAKd,QAAL,CAAc,CAAC,GAAG,KAAKW,KAAT,CAAd;AACD;;AAED,QAAMI,iBAAN,GAA6C;AAC3CT,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAjB;AACA,SAAKX,QAAL,CAAc,CAAC,GAAG,KAAKW,KAAT,CAAd;AACA,WAAO,IAAP;AACD;;AAOD,QAAMK,YAAN,CAAmBC,KAAnB,EAAoD;AAClD;AACA,UAAMC,KAAK,GAAG,KAAKP,KAAL,CAAWM,KAAX,EAAkB,KAAKhB,GAAvB,CAAd;;AAEA,QAAIiB,KAAK,KAAKC,SAAV,IAAuBzB,SAAS,CAACwB,KAAD,CAApC,EAA6C;AAC3C,YAAME,QAAQ,GAAG,MAAMzB,oBAAoB,CAAC0B,MAArB,CAA4BH,KAA5B,CAAvB;;AACA,UAAI,CAACE,QAAL,EAAe;AAAE,eAAO,KAAP;AAAe;AACjC;;AAEDE,IAAAA,UAAU,CAAC,MAAM;AACf;AACA,YAAMC,eAAe,GAAG,KAAKZ,KAAL,CAAWa,MAAX,CAAmBnB,IAAD,IAAUA,IAAI,CAAC,KAAKJ,GAAN,CAAJ,KAAmBiB,KAA/C,CAAxB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYgB,eAAZ;AACA,WAAKvB,QAAL,CAAcuB,eAAd;AACD,KALS,CAAV;AAOA,WAAO,IAAP;AACD;;AA9DkB;AAmErB,eAAe,SAASE,iBAAT,CAA2BC,KAA3B,EAAkD;AAC/D;AACA;AAGA,QAAM;AAAA,OAACf,KAAD;AAAA,OAAQX;AAAR,MAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMmC,IAAI,GAAG,IAAI9B,IAAJ,CAAoBF,oBAApB,EAA0CK,QAA1C,EAAoD,aAApD,CAAb;;AAEA,QAAM4B,YAAY,GAAG,YAA8B;AACjD,QAAIC,OAAO,GAAG,IAAd;AACAlB,IAAAA,KAAK,CAACmB,OAAN,CAAc,OAAOC,SAAP,EAAkBd,KAAlB,KAA4B;AACxC,UAAIc,SAAS,CAACC,WAAV,KAA0Bb,SAA1B,IAAuCzB,SAAS,CAACqC,SAAS,CAACC,WAAX,CAApD,EAA6E;AAC3E,YAAI,EAAC,MAAMC,YAAY,CAACF,SAAS,CAACC,WAAX,EAAwBD,SAAxB,CAAnB,CAAJ,EAA2D;AACzDF,UAAAA,OAAO,GAAG,KAAV;AACD;AACF,OAJD,MAKK;AACH,YAAI,EAAC,MAAMK,YAAY,CAACjB,KAAD,EAAQc,SAAR,CAAnB,CAAJ,EAA2C;AACzCF,UAAAA,OAAO,GAAG,KAAV;AACD;AACF;AACF,KAXD;AAYA,WAAOA,OAAP;AACD,GAfD;;AAiBA,QAAMK,YAAY,GAAG,OAAOjB,KAAP,EAAsBc,SAAtB,KAAiE;AACpF,UAAMI,iBAAiB,GAAG,MAAMxC,oBAAoB,CAACyC,MAArB,iCAAiCL,SAAjC;AAA4CC,MAAAA,WAAW,EAAEb;AAAzD,OAAhC;;AACA,QAAIgB,iBAAJ,EAAuB;AACrB;AACA,YAAME,MAAM,GAAG1B,KAAf;AACA0B,MAAAA,MAAM,CAACpB,KAAD,CAAN,GAAgBkB,iBAAhB;AACAnC,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAA,MAAAA,QAAQ,CAACqC,MAAD,CAAR;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAXD;;AAaA,QAAMJ,YAAY,GAAG,OAAOK,EAAP,EAAmBP,SAAnB,KAA8D;AACjF,UAAMX,QAAQ,GAAG,MAAMzB,oBAAoB,CAAC4C,MAArB,CAA4BD,EAA5B,EAAgCP,SAAhC,CAAvB;AACA,WAAOX,QAAP;AACD,GAHD;;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,WAAW,EAAExB,aADf;AAEE,IAAA,KAAK,EAAE,YAFT;AAGE,IAAA,QAAQ,EAAE,CAHZ;AAIE,IAAA,QAAQ,EAAE,CAJZ;AAKE,IAAA,KAAK,EAAEe,KALT;AAME,IAAA,UAAU,EAAEgB,IAAI,CAACnB,UANnB;AAOE,IAAA,YAAY,EAAEoB,YAPhB;AAQE,IAAA,gBAAgB,EAAED,IAAI,CAACf,gBARzB;AASE,IAAA,iBAAiB,EAAEe,IAAI,CAACZ,iBAT1B;AAUE,IAAA,YAAY,EAAEY,IAAI,CAACX,YAVrB;AAWE,IAAA,iBAAiB,EAAEW,IAAI,CAACa,iBAX1B;AAaE,IAAA,aAAa,EAAEd,KAAK,CAACe,aAbvB;AAcE,IAAA,eAAe,EAAEf,KAAK,CAACgB,eAdzB;AAeE,IAAA,MAAM,EAAEhB,KAAK,CAACiB,MAfhB;AAgBE,IAAA,cAAc,EAAEjB,KAAK,CAACkB,cAhBxB;AAiBE,IAAA,sBAAsB,EAAElB,KAAK,CAACmB,sBAjBhC;AAkBE,IAAA,eAAe,EAAEnB,KAAK,CAACoB;AAlBzB;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD","sourcesContent":["import React, { useState } from 'react';\r\nimport { IFormViewProps, FormView, isValidId } from 'material-ui-forms';\r\nimport Residence from '../../../models/Residence';\r\nimport residencesController, { IRepoController } from '../../../controllers/ResidenceController';\r\nimport { ResidenceForm } from './ResidenceForm';\r\n\r\nexport interface Test<T> {\r\n  handleLoad(local: boolean, data?: any): Promise<boolean>;\r\n\r\n}\r\n\r\nexport class Test<T> {\r\n  forms: T[] = [];\r\n  uuid = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(\r\n    public controller: IRepoController<T>,\r\n    public setForms: React.Dispatch<React.SetStateAction<T[]>>,\r\n    public key: string,\r\n    public propertyKeyIndex = 0,\r\n    ) {\r\n      console.log(this.key)\r\n    }\r\n\r\n  async handleLoad(local: boolean, data?: any) {\r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      //console.log(this.controller);\r\n      //const residences = await this.controller.getAll();\r\n      //if (!residences) return false;\r\n      //this.setForms(residences);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async handleAddNewItem() {\r\n    console.log(this.forms);\r\n    //@ts-ignore\r\n    this.forms.push({ [this.key]: this.uuid  });\r\n    this.uuid -= 1;\r\n    this.setForms([...this.forms]);\r\n  }\r\n\r\n  async handleSaveChanges() : Promise<boolean> {\r\n    console.log(this.forms)\r\n    this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `Residence${item[this.key]}`;\r\n  }\r\n\r\n  async handleDelete(index: number): Promise<boolean> {\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.key];\r\n\r\n    if (objId !== undefined && isValidId(objId)) {\r\n      const response = await residencesController.delete(objId);\r\n      if (!response) { return false; }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\r\n      console.log(filteredResults);\r\n      this.setForms(filteredResults);\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  //const tester = {} as Residence;\r\n  //console.log(Object.keys(tester))\r\n\r\n\r\n  const [forms, setForms] = useState([] as Residence[]);\r\n  const test = new Test<Residence>(residencesController, setForms, \"residenceId\")\r\n\r\n  const handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    forms.forEach(async (residence, index) => {\r\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\r\n        if (!await handleUpdate(residence.residenceId, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await handleCreate(index, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  const handleCreate = async (index: number, residence: Residence): Promise<boolean> => {\r\n    const residenceResponse = await residencesController.create({ ...residence, residenceId: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n      const tForms = forms;\r\n      tForms[index] = residenceResponse\r\n      setForms([])\r\n      setForms(tForms);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const handleUpdate = async (id: number, residence: Residence): Promise<boolean> => {\r\n    const response = await residencesController.update(id, residence);\r\n    return response;\r\n  }\r\n\r\n  return (\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={forms}\r\n      handleLoad={test.handleLoad}\r\n      handleSubmit={handleSubmit}\r\n      handleAddNewItem={test.handleAddNewItem}\r\n      handleSaveChanges={test.handleSaveChanges}\r\n      handleDelete={test.handleDelete}\r\n      handleGenerateKey={test.handleGenerateKey}\r\n\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}