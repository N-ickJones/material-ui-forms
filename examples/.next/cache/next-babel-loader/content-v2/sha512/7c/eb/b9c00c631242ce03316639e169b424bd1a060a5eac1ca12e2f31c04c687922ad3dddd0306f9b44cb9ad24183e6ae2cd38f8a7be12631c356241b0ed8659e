{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\new\\\\ResidenceFormView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { isValidId } from 'material-ui-forms';\nimport residencesController from '../../../controllers/ResidenceController';\nexport class Test2 {\n  constructor() {\n    _defineProperty(this, \"forms\", []);\n  }\n\n  printForms() {\n    console.log(\"test\", this.forms);\n  }\n\n}\n/*\r\nexport class Test<T> {\r\n\r\n  forms = [];\r\n  //uuid = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(\r\n    //public controller: IRepoController<T>,\r\n    //public setForms: React.Dispatch<React.SetStateAction<T[]>>,\r\n    //public key: string,\r\n    //public propertyKeyIndex = 0,\r\n    ) {\r\n      //console.log(this.key)\r\n\r\n      //this.forms = []\r\n      //console.log(this.forms)\r\n\r\n    }\r\n\r\n  async handleLoad(local: boolean, data?: any) {\r\n    \r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      //console.log(this.controller);\r\n      //const residences = await this.controller.getAll();\r\n      //if (!residences) return false;\r\n      //this.setForms(residences);\r\n    }\r\n    return true;\r\n    \r\n   return true;\r\n  }\r\n  \r\n\r\n  \r\n  async handleAddNewItem() {\r\n    //this.forms = []\r\n    console.log(this.forms);\r\n    //@ts-ignore\r\n    //this.forms.push({ [this.key]: this.uuid  });\r\n    //this.uuid -= 1;\r\n    //this.setForms([...this.forms]);\r\n  }\r\n\r\n  async handleSaveChanges() : Promise<boolean> {\r\n    //console.log(this.forms)\r\n    //this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `Residence${item[this.key]}`;\r\n  }\r\n\r\n  async handleDelete(index: number): Promise<boolean> {\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.key];\r\n\r\n    //if (objId !== undefined && isValidId(objId)) {\r\n      //const response = await residencesController.delete(objId);\r\n      //if (!response) { return false; }\r\n    //}\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      //const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\r\n      //console.log(filteredResults);\r\n      //this.setForms(filteredResults);\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n*/\n\nexport default function ResidenceFormView(props) {\n  //const tester = {} as Residence;\n  //console.log(Object.keys(tester))\n  const {\n    0: forms,\n    1: setForms\n  } = useState([]);\n  const test = new Test2(); //(residencesController, setForms, \"residenceId\");\n\n  const handleSubmit = async () => {\n    let success = true;\n    forms.forEach(async (residence, index) => {\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\n        if (!(await handleUpdate(residence.residenceId, residence))) {\n          success = false;\n        }\n      } else {\n        if (!(await handleCreate(index, residence))) {\n          success = false;\n        }\n      }\n    });\n    return success;\n  };\n\n  const handleCreate = async (index, residence) => {\n    const residenceResponse = await residencesController.create(_objectSpread(_objectSpread({}, residence), {}, {\n      residenceId: undefined\n    }));\n\n    if (residenceResponse) {\n      //Flush Forms temp key for real key\n      const tForms = forms;\n      tForms[index] = residenceResponse;\n      setForms([]);\n      setForms(tForms);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleUpdate = async (id, residence) => {\n    const response = await residencesController.update(id, residence);\n    return response;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: test.printForms,\n      children: \"Test1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TestComponent, {\n      handleAddNewItem: test.printForms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\nexport function TestComponent(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.handleAddNewItem,\n    children: \"Test2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n/*\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={forms}\r\n      //handleLoad={test.handleLoad}\r\n      //handleSubmit={handleSubmit}\r\n      handleAddNewItem={test.handleAddNewItem}\r\n      //handleSaveChanges={test.handleSaveChanges}\r\n      //handleDelete={test.handleDelete}\r\n      //handleGenerateKey={test.handleGenerateKey}\r\n\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n    */","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/ResidenceFormView.tsx"],"names":["React","useState","isValidId","residencesController","Test2","printForms","console","log","forms","ResidenceFormView","props","setForms","test","handleSubmit","success","forEach","residence","index","residenceId","undefined","handleUpdate","handleCreate","residenceResponse","create","tForms","id","response","update","TestComponent","handleAddNewItem"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { IFormViewProps, FormView, isValidId } from 'material-ui-forms';\r\nimport Residence from '../../../models/Residence';\r\nimport residencesController, { IRepoController } from '../../../controllers/ResidenceController';\r\nimport { ResidenceForm } from './ResidenceForm';\r\n\r\nexport interface Test<T> {\r\n  handleLoad(local: boolean, data?: any): Promise<boolean>;\r\n\r\n}\r\n\r\nexport class Test2<T> {\r\n  forms = [];\r\n\r\n  printForms() {\r\n    console.log(\"test\", this.forms)\r\n  }\r\n}\r\n\r\n/*\r\nexport class Test<T> {\r\n\r\n  forms = [];\r\n  //uuid = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(\r\n    //public controller: IRepoController<T>,\r\n    //public setForms: React.Dispatch<React.SetStateAction<T[]>>,\r\n    //public key: string,\r\n    //public propertyKeyIndex = 0,\r\n    ) {\r\n      //console.log(this.key)\r\n\r\n      //this.forms = []\r\n      //console.log(this.forms)\r\n\r\n    }\r\n\r\n  async handleLoad(local: boolean, data?: any) {\r\n    \r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      //console.log(this.controller);\r\n      //const residences = await this.controller.getAll();\r\n      //if (!residences) return false;\r\n      //this.setForms(residences);\r\n    }\r\n    return true;\r\n    \r\n   return true;\r\n  }\r\n  \r\n\r\n  \r\n  async handleAddNewItem() {\r\n    //this.forms = []\r\n    console.log(this.forms);\r\n    //@ts-ignore\r\n    //this.forms.push({ [this.key]: this.uuid  });\r\n    //this.uuid -= 1;\r\n    //this.setForms([...this.forms]);\r\n  }\r\n\r\n  async handleSaveChanges() : Promise<boolean> {\r\n    //console.log(this.forms)\r\n    //this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `Residence${item[this.key]}`;\r\n  }\r\n\r\n  async handleDelete(index: number): Promise<boolean> {\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.key];\r\n\r\n    //if (objId !== undefined && isValidId(objId)) {\r\n      //const response = await residencesController.delete(objId);\r\n      //if (!response) { return false; }\r\n    //}\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      //const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\r\n      //console.log(filteredResults);\r\n      //this.setForms(filteredResults);\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n*/\r\n\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  //const tester = {} as Residence;\r\n  //console.log(Object.keys(tester))\r\n\r\n  const [forms, setForms] = useState([] as Residence[]);\r\n\r\n  const test = new Test2<Residence>(); //(residencesController, setForms, \"residenceId\");\r\n\r\n  const handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    forms.forEach(async (residence, index) => {\r\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\r\n        if (!await handleUpdate(residence.residenceId, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await handleCreate(index, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  const handleCreate = async (index: number, residence: Residence): Promise<boolean> => {\r\n    const residenceResponse = await residencesController.create({ ...residence, residenceId: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n      const tForms = forms;\r\n      tForms[index] = residenceResponse\r\n      setForms([])\r\n      setForms(tForms);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const handleUpdate = async (id: number, residence: Residence): Promise<boolean> => {\r\n    const response = await residencesController.update(id, residence);\r\n    return response;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={test.printForms}>Test1</button>\r\n      <TestComponent handleAddNewItem={test.printForms} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function TestComponent(props: { handleAddNewItem: any }) {\r\n  return (\r\n    <button onClick={props.handleAddNewItem}>Test2</button>\r\n  )\r\n}\r\n\r\n/*\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={forms}\r\n      //handleLoad={test.handleLoad}\r\n      //handleSubmit={handleSubmit}\r\n      handleAddNewItem={test.handleAddNewItem}\r\n      //handleSaveChanges={test.handleSaveChanges}\r\n      //handleDelete={test.handleDelete}\r\n      //handleGenerateKey={test.handleGenerateKey}\r\n\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n    */"]},"metadata":{},"sourceType":"module"}