{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\new\\\\ResidenceFormView.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useState } from 'react';\nimport { FormView, isValidId } from 'material-ui-forms';\nimport residencesController from '../../../controllers/ResidenceController';\nimport { ResidenceForm } from './ResidenceForm';\nexport class Test {\n  //extends React.Component {\n  //this.setState\n  //forms: T[] = [];\n  constructor(controller, key, forms, setForms, propertyKeyIndex = 0) {//super({})\n    //this.state = {}\n\n    this.controller = controller;\n    this.key = key;\n    this.forms = forms;\n    this.setForms = setForms;\n    this.propertyKeyIndex = propertyKeyIndex;\n\n    _defineProperty(this, \"uuid\", Number.MAX_SAFE_INTEGER);\n\n    _defineProperty(this, \"handleLoad\", async (local, data) => {\n      if (local && data) {\n        this.forms = data;\n      } else {\n        const objects = await this.controller.getAll();\n        if (!objects) return false;\n        this.setForms(objects);\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"handleAddNewItem\", async () => {\n      //@ts-ignore\n      this.forms.push({\n        [this.key]: this.uuid\n      });\n      this.uuid -= 1;\n      this.setForms([...this.forms]);\n    });\n\n    _defineProperty(this, \"handleSaveChanges\", async () => {\n      this.setForms([...this.forms]);\n      return true;\n    });\n\n    _defineProperty(this, \"handleGenerateKey\", item => {\n      //@ts-ignore\n      return `Residence${item[this.key]}`;\n    });\n\n    _defineProperty(this, \"handleDelete\", async index => {\n      //@ts-ignore\n      const objId = this.forms[index][this.key];\n\n      if (objId !== undefined && isValidId(objId)) {\n        const response = await residencesController.delete(objId);\n\n        if (!response) {\n          return false;\n        }\n      }\n\n      setTimeout(() => {\n        //@ts-ignore\n        const filteredResults = this.forms.filter(item => item[this.key] !== objId);\n        console.log(\"filter\", filteredResults);\n        this.setForms(filteredResults); //this.forms = filteredResults; //added\n      });\n      return true;\n    });\n\n    _defineProperty(this, \"handleCreate\", async (index, object) => {\n      const residenceResponse = await this.controller.create(_objectSpread(_objectSpread({}, object), {}, {\n        [this.key]: undefined\n      }));\n\n      if (residenceResponse) {\n        //Flush Forms temp key for real key\n        //const tForms = this.forms;\n        //tForms[index] = residenceResponse\n        this.forms[index] = residenceResponse;\n        this.setForms([]); //this.setForms(tForms);\n\n        this.setForms(this.forms);\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"handleUpdate\", async (id, residence) => {\n      const response = await residencesController.update(id, residence);\n      return response;\n    });\n\n    _defineProperty(this, \"handleSubmit\", async () => {\n      let success = true;\n      console.log(this.forms);\n      this.forms.forEach(async (residence, index) => {\n        //@ts-ignore\n        if (residence[this.key] !== undefined && isValidId(residence[this.key])) {\n          //@ts-ignore\n          if (!(await this.handleUpdate(residence[this.key], residence))) {\n            success = false;\n          }\n        } else {\n          if (!(await this.handleCreate(index, residence))) {\n            success = false;\n          }\n        }\n      });\n      return success;\n    });\n  } //setForms = (f: T[]) => {}\n\n\n}\nexport default function ResidenceFormView(props) {\n  _s();\n\n  const {\n    0: forms,\n    1: setForms\n  } = useState([]);\n  const test = useRef(new Test(residencesController, \"residenceId\", forms, setForms)); //, forms, setForms,\n\n  return /*#__PURE__*/_jsxDEV(FormView, {\n    FormElement: ResidenceForm,\n    title: \"Residences\",\n    minNodes: 1,\n    maxNodes: 3,\n    forms: test.current.forms,\n    handleLoad: test.current.handleLoad,\n    handleSubmit: test.current.handleSubmit,\n    handleAddNewItem: test.current.handleAddNewItem,\n    handleSaveChanges: test.current.handleSaveChanges,\n    handleDelete: test.current.handleDelete,\n    handleGenerateKey: test.current.handleGenerateKey,\n    defaultLocked: props.defaultLocked,\n    submitButtonRef: props.submitButtonRef,\n    onNext: props.onNext,\n    hideLockButton: props.hideLockButton,\n    hideSaveProgressButton: props.hideSaveProgressButton,\n    hidePrintButton: props.hidePrintButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResidenceFormView, \"i/8xjoUmsz3280PLZTH4mN+/1nc=\");\n\n_c = ResidenceFormView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResidenceFormView\");","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/ResidenceFormView.tsx"],"names":["React","useRef","useState","FormView","isValidId","residencesController","ResidenceForm","Test","constructor","controller","key","forms","setForms","propertyKeyIndex","Number","MAX_SAFE_INTEGER","local","data","objects","getAll","push","uuid","item","index","objId","undefined","response","delete","setTimeout","filteredResults","filter","console","log","object","residenceResponse","create","id","residence","update","success","forEach","handleUpdate","handleCreate","ResidenceFormView","props","test","current","handleLoad","handleSubmit","handleAddNewItem","handleSaveChanges","handleDelete","handleGenerateKey","defaultLocked","submitButtonRef","onNext","hideLockButton","hideSaveProgressButton","hidePrintButton"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { IFormViewProps, FormView, isValidId } from 'material-ui-forms';\r\nimport Residence from '../../../models/Residence';\r\nimport residencesController, { IRepoController } from '../../../controllers/ResidenceController';\r\nimport { ResidenceForm } from './ResidenceForm';\r\n\r\nexport interface Test<T> {\r\n  handleLoad(local: boolean, data?: any): Promise<boolean>;\r\n\r\n}\r\n\r\nexport class Test<T> {//extends React.Component {\r\n  //this.setState\r\n  //forms: T[] = [];\r\n  uuid = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(\r\n    public controller: IRepoController<T>,\r\n    public key: string,\r\n    public forms: T[],\r\n    public setForms: React.Dispatch<React.SetStateAction<T[]>>,\r\n\r\n    public propertyKeyIndex = 0,\r\n    ) {\r\n      //super({})\r\n      //this.state = {}\r\n    }\r\n\r\n  handleLoad = async (local: boolean, data?: any) => {\r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      const objects = await this.controller.getAll();\r\n      if (!objects) return false;\r\n      this.setForms(objects);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  handleAddNewItem = async() => {\r\n    //@ts-ignore\r\n    this.forms.push({ [this.key]: this.uuid  });\r\n    this.uuid -= 1;\r\n    this.setForms([...this.forms]);\r\n  }\r\n\r\n  handleSaveChanges = async () => {\r\n    this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `Residence${item[this.key]}`;\r\n  }\r\n\r\n  handleDelete = async (index: number) => {\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.key];\r\n    if (objId !== undefined && isValidId(objId)) {\r\n      const response = await residencesController.delete(objId);\r\n      if (!response) { return false; }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\r\n      console.log(\"filter\", filteredResults);\r\n      this.setForms(filteredResults);\r\n      //this.forms = filteredResults; //added\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n  handleCreate = async (index: number, object: T): Promise<boolean> => {\r\n    const residenceResponse = await this.controller.create({ ...object, [this.key]: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n\r\n      //const tForms = this.forms;\r\n      //tForms[index] = residenceResponse\r\n      this.forms[index] = residenceResponse;\r\n\r\n      this.setForms([])\r\n\r\n      //this.setForms(tForms);\r\n      this.setForms(this.forms);\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleUpdate = async (id: number, residence: Residence): Promise<boolean> => {\r\n    const response = await residencesController.update(id, residence);\r\n    return response;\r\n  }\r\n\r\n  handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    console.log(this.forms);\r\n    this.forms.forEach(async (residence, index) => {\r\n      //@ts-ignore\r\n      if (residence[this.key] !== undefined && isValidId(residence[this.key])) {\r\n        //@ts-ignore\r\n        if (!await this.handleUpdate(residence[this.key], residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await this.handleCreate(index, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  //setForms = (f: T[]) => {}\r\n\r\n}\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  const [forms, setForms] = useState([] as Residence[]);\r\n  const test = useRef(\r\n    new Test(\r\n      residencesController, \r\n      \"residenceId\",\r\n      forms,\r\n      setForms\r\n    )\r\n  ) //, forms, setForms,\r\n\r\n  return (\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={test.current.forms}\r\n\r\n      handleLoad={test.current.handleLoad}\r\n      handleSubmit={test.current.handleSubmit}\r\n      handleAddNewItem={test.current.handleAddNewItem}\r\n      handleSaveChanges={test.current.handleSaveChanges}\r\n      handleDelete={test.current.handleDelete}\r\n      handleGenerateKey={test.current.handleGenerateKey}\r\n\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}