{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\node_library\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\ResidenceFormView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport { Typography } from \"@material-ui/core\";\nimport { AlertDialogButton, AutoField, AutoFreeField, countryOptions, CustomTextField, FormView, getOrdinal, isZip, residenceOptions, usCityOptions, usStateOptions } from 'material-ui-forms';\nimport residencesController from '../../controllers/ResidenceController';\nexport default function ResidenceFormView(props) {\n  const {\n    0: forms,\n    1: setForms\n  } = useState([]);\n  const {\n    0: uid,\n    1: setUid\n  } = useState(Number.MAX_SAFE_INTEGER);\n\n  const handleLoad = async (local, data) => {\n    if (local && data) {\n      setForms(data);\n    } else {\n      const residences = await residencesController.getAll();\n      if (!residences) return false;\n      setForms(residences);\n    }\n\n    return true;\n  };\n\n  const handleAddNewItem = async () => {\n    forms.push({\n      residenceId: Number.MAX_SAFE_INTEGER\n    });\n    setUid(uid - 1);\n    setForms([...forms]);\n  };\n\n  const handleSubmit = async () => {\n    let success = true;\n    forms.forEach(async (residence, index) => {\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\n        if (!(await handleUpdate(residence.residenceId, residence))) {\n          success = false;\n        }\n      } else {\n        if (!(await handleCreate(index, residence))) {\n          success = false;\n        }\n      }\n    });\n    return success;\n  };\n\n  const handleCreate = async (index, residence) => {\n    const residenceResponse = await residencesController.create(_objectSpread(_objectSpread({}, residence), {}, {\n      residenceId: undefined\n    }));\n\n    if (residenceResponse) {\n      //Flush Forms temp key for real key\n      const tForms = forms;\n      tForms[index] = residenceResponse;\n      setForms([]);\n      setForms(tForms);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleUpdate = async (id, residence) => {\n    const response = await residencesController.update(id, residence);\n    return response;\n  };\n\n  const handleDelete = async index => {\n    const residenceId = forms[index].residenceId;\n\n    if (residenceId !== undefined && isValidId(residenceId)) {\n      const response = await residencesController.delete(residenceId);\n\n      if (!response) {\n        return false;\n      } //return then fire\n\n\n      setTimeout(() => {\n        const filteredResults = forms.filter(item => item.residenceId !== residenceId);\n        setForms(filteredResults);\n      });\n    }\n\n    return true;\n  };\n\n  const handleSaveChanges = async () => {\n    setForms([...forms]);\n    return true;\n  };\n\n  const handleGenerateKey = item => {\n    return `Residence${item.residenceId}`;\n  };\n\n  const isValidId = id => {\n    return id !== undefined && id < Number.MAX_SAFE_INTEGER - 1000;\n  }; //*\n\n\n  return /*#__PURE__*/_jsxDEV(FormView, {\n    FormElement: ResidenceForm,\n    title: \"Residences\",\n    minNodes: 1,\n    maxNodes: 3,\n    forms: forms,\n    handleLoad: handleLoad,\n    handleSubmit: handleSubmit,\n    handleAddNewItem: handleAddNewItem,\n    handleSaveChanges: handleSaveChanges,\n    handleDelete: handleDelete,\n    handleGenerateKey: handleGenerateKey,\n    defaultLocked: props.defaultLocked,\n    submitButtonRef: props.submitButtonRef,\n    onNext: props.onNext,\n    hideLockButton: props.hideLockButton,\n    hideSaveProgressButton: props.hideSaveProgressButton,\n    hidePrintButton: props.hidePrintButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this); //*/\n\n  /*\r\n  return (\r\n   \r\n  )\r\n  */\n}\nexport function ResidenceForm(props) {\n  const title = \"Residence\";\n  const {\n    index,\n    values,\n    onChange,\n    printMode,\n    locked\n  } = props;\n\n  const handleChange = (e, property, value) => {\n    onChange(e, props.index, property, value);\n  };\n\n  const handleDelete = async () => {\n    props.handleDelete && props.handleDelete(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: [title, \" - \", props.index + 1 !== 1 && `${getOrdinal(props.index + 1)} `, \"Most Recent\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          className: \"ml-auto\",\n          children: /*#__PURE__*/_jsxDEV(AlertDialogButton, {\n            className: !locked ? \"\" : \"d-none\",\n            id: \"deleteForm\",\n            label: \"Delete\",\n            title: `Are you sure you want to delete this ${title}?`,\n            description: `This will remove the ${title.toLowerCase()} from your profile.`,\n            color: \"secondary\",\n            backLabel: \"Cancel\",\n            forwardLabel: \"Delete\",\n            onSubmit: handleDelete,\n            disabled: props.handleDelete === undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: props.printMode ? 12 : 12,\n        children: /*#__PURE__*/_jsxDEV(AutoField, {\n          label: \"Type\",\n          name: \"type\",\n          onChange: handleChange,\n          value: values.type,\n          locked: locked,\n          required: false,\n          options: residenceOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: props.printMode ? 12 : 12,\n        children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n          placeholder: \"Enter the address line 1\",\n          label: \"Address Line 1\",\n          name: \"addressLine1\",\n          onChange: handleChange,\n          value: values.addressLine1,\n          validators: [],\n          locked: locked,\n          required: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: props.printMode ? 12 : 12,\n        children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n          placeholder: \"Enter the address line 2\",\n          label: \"Address Line 2\",\n          name: \"addressLine2\",\n          onChange: handleChange,\n          value: values.addressLine2,\n          validators: [],\n          locked: locked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: props.printMode ? 12 : 12,\n        children: /*#__PURE__*/_jsxDEV(AutoFreeField, {\n          placeholder: \"Enter a city\",\n          label: \"City\",\n          name: \"city\",\n          onChange: handleChange,\n          value: values.city,\n          locked: locked,\n          required: false,\n          options: usCityOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: props.printMode ? 12 : 12,\n        children: /*#__PURE__*/_jsxDEV(AutoField, {\n          label: \"State\",\n          name: \"state\",\n          onChange: handleChange,\n          value: values.state,\n          locked: locked,\n          options: usStateOptions,\n          required: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: props.printMode ? 12 : 12,\n        children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n          placeholder: \"Enter the zip code\",\n          label: \"Zip Code\",\n          name: \"zipCode\",\n          onChange: handleChange,\n          value: values.zipCode,\n          validators: [isZip],\n          locked: locked,\n          required: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: props.printMode ? 12 : 12,\n        children: /*#__PURE__*/_jsxDEV(AutoField, {\n          label: \"Country\",\n          name: \"country\",\n          onChange: handleChange,\n          value: values.country,\n          locked: locked,\n          required: false,\n          options: countryOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/node_library/material-ui-forms/examples/src/components/forms/ResidenceFormView.tsx"],"names":["React","useState","Grid","Typography","AlertDialogButton","AutoField","AutoFreeField","countryOptions","CustomTextField","FormView","getOrdinal","isZip","residenceOptions","usCityOptions","usStateOptions","residencesController","ResidenceFormView","props","forms","setForms","uid","setUid","Number","MAX_SAFE_INTEGER","handleLoad","local","data","residences","getAll","handleAddNewItem","push","residenceId","handleSubmit","success","forEach","residence","index","undefined","isValidId","handleUpdate","handleCreate","residenceResponse","create","tForms","id","response","update","handleDelete","delete","setTimeout","filteredResults","filter","item","handleSaveChanges","handleGenerateKey","ResidenceForm","defaultLocked","submitButtonRef","onNext","hideLockButton","hideSaveProgressButton","hidePrintButton","title","values","onChange","printMode","locked","handleChange","e","property","value","toLowerCase","type","addressLine1","addressLine2","city","state","zipCode","country"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { AlertDialogButton, AutoField, AutoFreeField, countryOptions, CustomTextField, FormView, getOrdinal, IFormProps, IFormViewProps, isZip, residenceOptions, usCityOptions, usStateOptions } from 'material-ui-forms';\r\nimport Residence from '../../models/Residence';\r\nimport residencesController from '../../controllers/ResidenceController';\r\nimport { controllerTest } from '../../tests/controllerTest';\r\n\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  const [forms, setForms] = useState([] as Residence[]);\r\n  const [uid, setUid] = useState(Number.MAX_SAFE_INTEGER);\r\n\r\n  const handleLoad = async (local: boolean, data?: any): Promise<boolean> => {\r\n    if (local && data) {\r\n      setForms(data);\r\n    }\r\n    else {\r\n      const residences = await residencesController.getAll();\r\n      if (!residences) return false;\r\n      setForms(residences);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const handleAddNewItem = async () => {\r\n    forms.push({ residenceId: Number.MAX_SAFE_INTEGER  } as Residence);\r\n    setUid(uid - 1);\r\n    setForms([...forms]);\r\n  }\r\n\r\n  const handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    forms.forEach(async (residence, index) => {\r\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\r\n        if (!await handleUpdate(residence.residenceId, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await handleCreate(index, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  const handleCreate = async (index: number, residence: Residence): Promise<boolean> => {\r\n    const residenceResponse = await residencesController.create({ ...residence, residenceId: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n      const tForms = forms;\r\n      tForms[index] = residenceResponse\r\n      setForms([])\r\n      setForms(tForms);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const handleUpdate = async (id: number, residence: Residence): Promise<boolean> => {\r\n    const response = await residencesController.update(id, residence);\r\n    return response;\r\n  }\r\n\r\n  const handleDelete = async (index: number): Promise<boolean> => {\r\n    const residenceId = forms[index].residenceId;\r\n    if (residenceId !== undefined && isValidId(residenceId)) {\r\n      const response = await residencesController.delete(residenceId);\r\n      if (!response) { return false; }\r\n\r\n      //return then fire\r\n      setTimeout(() => {\r\n        const filteredResults = forms.filter((item) => item.residenceId !== residenceId);\r\n        setForms(filteredResults);\r\n      })\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const handleSaveChanges = async (): Promise<boolean> => {\r\n    setForms([...forms]);\r\n    return true;\r\n  }\r\n\r\n  const handleGenerateKey = (item: Residence) => {\r\n    return `Residence${item.residenceId}`;\r\n  }\r\n\r\n  const isValidId = (id?: number) => {\r\n    return id !== undefined && id < (Number.MAX_SAFE_INTEGER - 1000);\r\n  }\r\n  //*\r\n  return (\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={forms}\r\n      handleLoad={handleLoad}\r\n      handleSubmit={handleSubmit}\r\n      handleAddNewItem={handleAddNewItem}\r\n      handleSaveChanges={handleSaveChanges}\r\n      handleDelete={handleDelete}\r\n      handleGenerateKey={handleGenerateKey}\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n  )\r\n  //*/\r\n\r\n  /*\r\n  return (\r\n   \r\n  )\r\n  */\r\n  \r\n\r\n}\r\n\r\nexport function ResidenceForm(props: IFormProps<Residence>) {\r\n  const title = \"Residence\";\r\n  const {\r\n    index,\r\n    values,\r\n    onChange,\r\n    printMode,\r\n    locked,\r\n\r\n  } = props;\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement | {}>, property: string, value: string | boolean) => {\r\n    onChange(e, props.index, property, value);\r\n  }\r\n  const handleDelete = async () => {\r\n    props.handleDelete && props.handleDelete(index);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3}>\r\n        <Grid container item xs={12}>\r\n          <Grid>\r\n            <Typography variant=\"h5\">{title} - {props.index + 1 !== 1 && `${getOrdinal(props.index + 1)} `}Most Recent</Typography>\r\n          </Grid>\r\n          <Grid className=\"ml-auto\">\r\n            <AlertDialogButton\r\n              className={!locked ? \"\" : \"d-none\"}\r\n              id=\"deleteForm\"\r\n              label=\"Delete\"\r\n              title={`Are you sure you want to delete this ${title}?`}\r\n              description={`This will remove the ${title.toLowerCase()} from your profile.`}\r\n              color=\"secondary\"\r\n              backLabel=\"Cancel\"\r\n              forwardLabel=\"Delete\"\r\n              onSubmit={handleDelete}\r\n              disabled={props.handleDelete === undefined}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={props.printMode ? 12 : 12}>\r\n          <AutoField\r\n            label=\"Type\"\r\n            name=\"type\"\r\n            onChange={handleChange}\r\n            value={values.type}\r\n            locked={locked}\r\n            required={false}\r\n            options={residenceOptions}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={props.printMode ? 12 : 12}>\r\n          <CustomTextField\r\n            placeholder=\"Enter the address line 1\"\r\n            label=\"Address Line 1\"\r\n            name=\"addressLine1\"\r\n            onChange={handleChange}\r\n            value={values.addressLine1}\r\n            validators={[\r\n            ]}\r\n            locked={locked}\r\n            required={false}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={props.printMode ? 12 : 12}>\r\n          <CustomTextField\r\n            placeholder=\"Enter the address line 2\"\r\n            label=\"Address Line 2\"\r\n            name=\"addressLine2\"\r\n            onChange={handleChange}\r\n            value={values.addressLine2}\r\n            validators={[\r\n            ]}\r\n            locked={locked}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={props.printMode ? 12 : 12}>\r\n          <AutoFreeField\r\n            placeholder=\"Enter a city\"\r\n            label=\"City\"\r\n            name=\"city\"\r\n            onChange={handleChange}\r\n            value={values.city}\r\n            locked={locked}\r\n            required={false}\r\n            options={usCityOptions}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={props.printMode ? 12 : 12}>\r\n          <AutoField\r\n            label=\"State\"\r\n            name=\"state\"\r\n            onChange={handleChange}\r\n            value={values.state}\r\n            locked={locked}\r\n            options={usStateOptions}\r\n            required={false}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={props.printMode ? 12 : 12}>\r\n          <CustomTextField\r\n            placeholder=\"Enter the zip code\"\r\n            label=\"Zip Code\"\r\n            name=\"zipCode\"\r\n            onChange={handleChange}\r\n            value={values.zipCode}\r\n            validators={[\r\n              isZip\r\n            ]}\r\n            locked={locked}\r\n            required={false}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={props.printMode ? 12 : 12}>\r\n          <AutoField\r\n            label=\"Country\"\r\n            name=\"country\"\r\n            onChange={handleChange}\r\n            value={values.country}\r\n            locked={locked}\r\n            required={false}\r\n            options={countryOptions}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}