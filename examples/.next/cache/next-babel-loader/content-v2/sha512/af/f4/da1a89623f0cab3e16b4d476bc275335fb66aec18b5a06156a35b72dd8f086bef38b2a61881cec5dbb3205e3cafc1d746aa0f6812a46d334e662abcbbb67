{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MockApi } from \"../mockApi/mockApi\";\n\n/**\r\n * ResidenceController: Common API Methods used for Web Forms\r\n * mockApi: Simulates an Axios API call to your server\r\n */\nexport class ResidencesController {\n  constructor() {\n    _defineProperty(this, \"controller\", \"/residences\");\n\n    _defineProperty(this, \"mockApi\", new MockApi(\"residenceId\"));\n  }\n\n  async getAll() {\n    try {\n      const response = await this.mockApi.get(`${this.controller}`);\n      if (response.status === 200) return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return null;\n  }\n\n  async get(id) {\n    try {\n      const response = await this.mockApi.get(`${this.controller}/${id}`);\n      if (response.status === 200) return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return null;\n  }\n\n  async create(residence) {\n    try {\n      const response = await this.mockApi.post(`${this.controller}`, residence);\n      if (response.status === 201) return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return null;\n  }\n\n  async update(id, residence) {\n    try {\n      const response = await this.mockApi.put(`${this.controller}/${id}`, residence);\n      if (response.status === 204) return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return false;\n  }\n\n  async delete(id) {\n    try {\n      const response = await this.mockApi.delete(`${this.controller}/${id}`);\n      if (response.status === 200) return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return null;\n  }\n\n  static get instance() {\n    return residencesController;\n  }\n\n}\nconst residencesController = new ResidencesController();\nexport default residencesController;","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/controllers/ResidenceController.ts"],"names":["MockApi","ResidencesController","getAll","response","mockApi","get","controller","status","data","error","console","log","id","create","residence","post","update","put","delete","instance","residencesController"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,oBAAxB;;AAWA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,oBAAN,CAA4D;AAAA;AAAA,wCAClD,aADkD;;AAAA,qCAErD,IAAID,OAAJ,CAAuB,aAAvB,CAFqD;AAAA;;AAI/D,QAAME,MAAN,GAAe;AACX,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaC,GAAb,CAAkB,GAAE,KAAKC,UAAW,EAApC,CAAvB;AACA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACI,OAAOJ,QAAQ,CAACK,IAAhB;AACP,KAJD,CAKA,OAAOC,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,WAAO,IAAP;AACH;;AAED,QAAMJ,GAAN,CAAUO,EAAV,EAAsB;AAClB,QAAI;AACA,YAAMT,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaC,GAAb,CAAkB,GAAE,KAAKC,UAAW,IAAGM,EAAG,EAA1C,CAAvB;AACA,UAAIT,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACI,OAAOJ,QAAQ,CAACK,IAAhB;AACP,KAJD,CAKA,OAAOC,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,WAAO,IAAP;AACH;;AAED,QAAMI,MAAN,CAAaC,SAAb,EAAmC;AAC/B,QAAI;AACA,YAAMX,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaW,IAAb,CAAmB,GAAE,KAAKT,UAAW,EAArC,EAAwCQ,SAAxC,CAAvB;AACA,UAAIX,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACI,OAAOJ,QAAQ,CAACK,IAAhB;AACP,KAJD,CAKA,OAAMC,KAAN,EAAa;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,WAAO,IAAP;AACH;;AAED,QAAMO,MAAN,CAAaJ,EAAb,EAAyBE,SAAzB,EAA+C;AAC3C,QAAI;AACA,YAAMX,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaa,GAAb,CAAkB,GAAE,KAAKX,UAAW,IAAGM,EAAG,EAA1C,EAA6CE,SAA7C,CAAvB;AACA,UAAIX,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACI,OAAO,IAAP;AACP,KAJD,CAKA,OAAME,KAAN,EAAa;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,WAAO,KAAP;AACH;;AAED,QAAMS,MAAN,CAAaN,EAAb,EAAyB;AACrB,QAAI;AACA,YAAMT,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAac,MAAb,CAAqB,GAAE,KAAKZ,UAAW,IAAGM,EAAG,EAA7C,CAAvB;AACA,UAAIT,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACI,OAAOJ,QAAQ,CAACK,IAAhB;AACP,KAJD,CAKA,OAAMC,KAAN,EAAa;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,WAAO,IAAP;AACH;;AAED,aAAWU,QAAX,GAAsB;AAAE,WAAOC,oBAAP;AAA6B;;AAhEU;AAmEnE,MAAMA,oBAAoB,GAAG,IAAInB,oBAAJ,EAA7B;AAEA,eAAemB,oBAAf","sourcesContent":["import { MockApi } from \"../mockApi/mockApi\";\r\nimport Residence from \"../models/Residence\";\r\n\r\nexport interface IResidencesController {\r\n    getAll(): Promise<Residence[] | null>;\r\n    get(id: number): Promise<Residence | null>;\r\n    create(residence: Residence): Promise<Residence | null>;\r\n    update(id: number, residence: Residence): Promise<boolean>;\r\n    delete(id: number): Promise<Residence | null>;\r\n}\r\n\r\n/**\r\n * ResidenceController: Common API Methods used for Web Forms\r\n * mockApi: Simulates an Axios API call to your server\r\n */\r\n\r\nexport class ResidencesController implements IResidencesController {\r\n    controller = \"/residences\";\r\n    mockApi = new MockApi<Residence>(\"residenceId\");\r\n\r\n    async getAll() {\r\n        try {\r\n            const response = await this.mockApi.get(`${this.controller}`);\r\n            if (response.status === 200) \r\n                return response.data as Residence[];\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async get(id: number) {\r\n        try {\r\n            const response = await this.mockApi.get(`${this.controller}/${id}`);\r\n            if (response.status === 200) \r\n                return response.data as Residence;\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async create(residence: Residence) {\r\n        try {\r\n            const response = await this.mockApi.post(`${this.controller}`, residence)\r\n            if (response.status === 201)\r\n                return response.data as Residence;\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async update(id: number, residence: Residence) {\r\n        try {\r\n            const response = await this.mockApi.put(`${this.controller}/${id}`, residence)\r\n            if (response.status === 204)\r\n                return true;\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async delete(id: number) {\r\n        try {\r\n            const response = await this.mockApi.delete(`${this.controller}/${id}`)\r\n            if (response.status === 200)\r\n                return response.data as Residence;\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    static get instance() { return residencesController }\r\n}\r\n\r\nconst residencesController = new ResidencesController();\r\n\r\nexport default residencesController;"]},"metadata":{},"sourceType":"module"}