{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\new\\\\ResidenceFormView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class FormHandler {\n  constructor(args) {\n    _defineProperty(this, \"uuid\", Number.MAX_SAFE_INTEGER);\n\n    _defineProperty(this, \"forms\", void 0);\n\n    _defineProperty(this, \"formsState\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"controller\", void 0);\n\n    _defineProperty(this, \"handleLoad\", async (local, data) => {\n      if (local && data) {\n        this.setState(data);\n      } else {\n        const forms = await this.controller.getAll();\n        if (!forms) return false;\n        this.setState(forms);\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"handleAddNewItem\", async () => {\n      this.uuid -= 1; //this.forms.push();\n      //@ts-ignore\n\n      this.setState([...this.forms, {\n        [this.key]: this.uuid\n      }]);\n    });\n\n    _defineProperty(this, \"handleDelete\", async index => {\n      //@ts-ignore\n      const objectId = this.forms[index][this.key];\n\n      if (objectId !== undefined && isValidId(objectId)) {\n        const response = await this.controller.delete(objectId);\n\n        if (!response) {\n          return false;\n        }\n      }\n\n      setTimeout(() => {\n        //@ts-ignore\n        this.setState(this.forms.filter(item => item[this.key] !== objectId));\n      });\n      return true;\n    });\n\n    _defineProperty(this, \"handleSubmit\", async () => {\n      let success = true;\n      this.forms.forEach(async (object, index) => {\n        //@ts-ignore\n        if (object[this.key] !== undefined && isValidId(object[this.key])) {\n          //@ts-ignore\n          if (!(await this.handleUpdate(object[this.key], object))) {\n            success = false;\n          }\n        } else {\n          if (!(await this.handleCreate(index, object))) {\n            success = false;\n          }\n        }\n      });\n      return success;\n    });\n\n    _defineProperty(this, \"handleCreate\", async (index, object) => {\n      const response = await this.controller.create(_objectSpread(_objectSpread({}, object), {}, {\n        [this.key]: undefined\n      }));\n\n      if (response) {\n        //Flush Forms temp key for real key\n        const tempForms = this.forms;\n        tempForms[index] = response;\n        this.setState([]);\n        this.setState(tempForms);\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"handleUpdate\", async (id, object) => {\n      const response = await this.controller.update(id, object);\n      return response;\n    });\n\n    _defineProperty(this, \"handleSaveChanges\", async () => {\n      this.formsState([...this.forms]);\n      return true;\n    });\n\n    _defineProperty(this, \"handleGenerateKey\", item => {\n      //@ts-ignore\n      return `${this.key}${item[this.key]}`;\n    });\n\n    this.controller = args.controller;\n    this.key = args.key;\n    this.forms = args.state[0];\n    this.formsState = args.state[1];\n  }\n\n  setState(input) {\n    //@ts-ignore\n    this.forms = typeof input === 'function' ? input(this.forms) : input;\n    this.formsState(input);\n  }\n\n}\n\n/*\r\nimport React, { useRef, useState } from 'react';\r\n\r\nexport type BasicStateAction<T> = ((value: T) => T) | T;\r\n\r\nexport default function Test() {\r\n  \r\n\r\n  function NormalStateUsage() {\r\n    const [state, setState] = useState(0);\r\n\r\n    const onClick = () => {\r\n      const inc = state + 1;\r\n      setState(inc)\r\n    }\r\n\r\n    return (\r\n      <div style={{border: \"1px solid black\", margin: 10, padding: 10}}>\r\n        <h3>Normal State</h3>\r\n        <p>{state}</p>\r\n        <p></p>\r\n        <button onClick={onClick}>Increment</button>\r\n      </div>\r\n    )\r\n  }//react-reconciler/src/ReactInternalTypes\r\n\r\n  function ClassStateUsage() {\r\n    const classRef = useRef(new ClassState(useState([] as string[])));\r\n\r\n    const onClick = () => {\r\n      classRef.current.setState(value => [...value, \"next\"]);\r\n    }\r\n\r\n    return (\r\n      <div style={{border: \"1px solid black\", margin: 10, padding: 10}}>\r\n        <h3>Class State</h3>\r\n        <p>{classRef.current.state}</p>\r\n        <p></p>\r\n        <button onClick={onClick}>Increment</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NormalStateUsage />\r\n      <ClassStateUsage />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport class ClassState<T> {\r\n  state: T;\r\n  constructor(private stateArray: [T, React.Dispatch<React.SetStateAction<T>>]) {\r\n    this.state = stateArray[0];\r\n  }\r\n  setState(input: BasicStateAction<T>) {\r\n    //@ts-ignore\r\n    this.state = (typeof input === 'function') ? input(this.state) : input;\r\n    this.stateArray[1](input)\r\n  }\r\n}\r\n*/\nimport React, { useRef, useState } from 'react';\nimport { FormViewAuto, isValidId } from 'material-ui-forms';\nimport residencesController from '../../../controllers/ResidenceController';\nimport { ResidenceForm } from './ResidenceForm';\nexport default function ResidenceFormView(props) {\n  const formHandler = new FormHandler({\n    key: \"residenceId\",\n    controller: residencesController,\n    state: useState([])\n  });\n  const formHandlerRef = useRef(formHandler);\n  return /*#__PURE__*/_jsxDEV(FormViewAuto, {\n    FormElement: ResidenceForm,\n    title: \"Residences\",\n    minNodes: 1,\n    maxNodes: 3,\n    formHandlerRef: formHandlerRef,\n    defaultLocked: props.defaultLocked,\n    submitButtonRef: props.submitButtonRef,\n    onNext: props.onNext,\n    hideLockButton: props.hideLockButton,\n    hideSaveProgressButton: props.hideSaveProgressButton,\n    hidePrintButton: props.hidePrintButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/ResidenceFormView.tsx"],"names":["FormHandler","constructor","args","Number","MAX_SAFE_INTEGER","local","data","setState","forms","controller","getAll","uuid","key","index","objectId","undefined","isValidId","response","delete","setTimeout","filter","item","success","forEach","object","handleUpdate","handleCreate","create","tempForms","id","update","formsState","state","input","React","useRef","useState","FormViewAuto","residencesController","ResidenceForm","ResidenceFormView","props","formHandler","formHandlerRef","defaultLocked","submitButtonRef","onNext","hideLockButton","hideSaveProgressButton","hidePrintButton"],"mappings":"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","sourcesContent":["\r\n\r\n\r\nexport class FormHandler<T> {\r\n  constructor(args: FormArgs<T>) {\r\n    this.controller = args.controller;\r\n    this.key = args.key;\r\n    this.forms = args.state[0];\r\n    this.formsState = args.state[1];\r\n  }\r\n  uuid = Number.MAX_SAFE_INTEGER;\r\n  forms: T[];\r\n  formsState: React.Dispatch<React.SetStateAction<T[]>>;\r\n  key: string;\r\n  controller: IRepoController<T>\r\n\r\n  handleLoad = async (local: boolean, data?: any) => {\r\n    if (local && data) {\r\n      this.setState(data);\r\n    }\r\n    else {\r\n      const forms = await this.controller.getAll();\r\n      if (!forms) return false;\r\n      this.setState(forms);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleAddNewItem = async () => {\r\n    this.uuid -= 1;\r\n\r\n    \r\n    //this.forms.push();\r\n    //@ts-ignore\r\n    this.setState([...this.forms, { [this.key]: this.uuid } ]);\r\n  }\r\n\r\n  handleDelete = async (index: number): Promise<boolean> => {\r\n    //@ts-ignore\r\n    const objectId = this.forms[index][this.key];\r\n    if (objectId !== undefined && isValidId(objectId)) {\r\n      const response = await this.controller.delete(objectId);\r\n      if (!response) { return false; }\r\n    }\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      this.setState(this.forms.filter((item) => item[this.key]  !== objectId));\r\n    })\r\n    return true;\r\n  }\r\n\r\n  handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    this.forms.forEach(async (object: T, index: number) => {\r\n      //@ts-ignore\r\n      if (object[this.key] !== undefined && isValidId(object[this.key])) {\r\n        //@ts-ignore\r\n        if (!await this.handleUpdate(object[this.key], object)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await this.handleCreate(index, object)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  private handleCreate = async (index: number, object: T): Promise<boolean> => {\r\n    const response = await this.controller.create({ ...object, [this.key]: undefined });\r\n    if (response) {\r\n      //Flush Forms temp key for real key\r\n      const tempForms = this.forms;\r\n      tempForms[index] = response\r\n      this.setState([])\r\n      this.setState(tempForms);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private handleUpdate = async (id: number, object: T): Promise<boolean> => {\r\n    const response = await this.controller.update(id, object);\r\n    return response;\r\n  }\r\n\r\n  handleSaveChanges = async () => {\r\n    this.formsState([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `${this.key}${item[this.key]}`;\r\n  }\r\n\r\n  private setState(input: BasicStateAction<T[]>) {\r\n    //@ts-ignore\r\n    this.forms = (typeof input === 'function') ? input(this.forms) : input;\r\n    this.formsState(input)\r\n  }\r\n\r\n}\r\n\r\nexport type BasicStateAction<T> = ((value: T) => T) | T;\r\n\r\n\r\n/*\r\nimport React, { useRef, useState } from 'react';\r\n\r\nexport type BasicStateAction<T> = ((value: T) => T) | T;\r\n\r\nexport default function Test() {\r\n  \r\n\r\n  function NormalStateUsage() {\r\n    const [state, setState] = useState(0);\r\n\r\n    const onClick = () => {\r\n      const inc = state + 1;\r\n      setState(inc)\r\n    }\r\n\r\n    return (\r\n      <div style={{border: \"1px solid black\", margin: 10, padding: 10}}>\r\n        <h3>Normal State</h3>\r\n        <p>{state}</p>\r\n        <p></p>\r\n        <button onClick={onClick}>Increment</button>\r\n      </div>\r\n    )\r\n  }//react-reconciler/src/ReactInternalTypes\r\n\r\n  function ClassStateUsage() {\r\n    const classRef = useRef(new ClassState(useState([] as string[])));\r\n\r\n    const onClick = () => {\r\n      classRef.current.setState(value => [...value, \"next\"]);\r\n    }\r\n\r\n    return (\r\n      <div style={{border: \"1px solid black\", margin: 10, padding: 10}}>\r\n        <h3>Class State</h3>\r\n        <p>{classRef.current.state}</p>\r\n        <p></p>\r\n        <button onClick={onClick}>Increment</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NormalStateUsage />\r\n      <ClassStateUsage />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport class ClassState<T> {\r\n  state: T;\r\n  constructor(private stateArray: [T, React.Dispatch<React.SetStateAction<T>>]) {\r\n    this.state = stateArray[0];\r\n  }\r\n  setState(input: BasicStateAction<T>) {\r\n    //@ts-ignore\r\n    this.state = (typeof input === 'function') ? input(this.state) : input;\r\n    this.stateArray[1](input)\r\n  }\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\nimport React, { useRef, useState } from 'react';\r\nimport { IFormViewProps, FormViewAuto, FormArgs, IRepoController, isValidId } from 'material-ui-forms';\r\nimport Residence from '../../../models/Residence';\r\nimport residencesController from '../../../controllers/ResidenceController';\r\nimport { ResidenceForm } from './ResidenceForm';\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  const formHandler = new FormHandler({\r\n    key: \"residenceId\",\r\n    controller: residencesController, \r\n    state:  useState([] as Residence[])\r\n  });\r\n\r\n  const formHandlerRef = useRef(formHandler);\r\n\r\n  return (\r\n    <FormViewAuto<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      formHandlerRef={formHandlerRef}\r\n\r\n\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n\r\n      \r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}