{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\new\\\\ResidenceFormView.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { FormView, isValidId } from 'material-ui-forms';\nimport residencesController from '../../../controllers/ResidenceController';\nimport { ResidenceForm } from './ResidenceForm';\nexport class Test {\n  constructor(controller, setForms, key, propertyKeyIndex = 0) {\n    this.controller = controller;\n    this.setForms = setForms;\n    this.key = key;\n    this.propertyKeyIndex = propertyKeyIndex;\n\n    _defineProperty(this, \"forms\", []);\n\n    _defineProperty(this, \"uuid\", Number.MAX_SAFE_INTEGER);\n\n    _defineProperty(this, \"handleLoad\", async (local, data) => {\n      if (local && data) {\n        this.forms = data;\n      } else {\n        const residences = await this.controller.getAll();\n        if (!residences) return false;\n        this.setForms(residences);\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"handleAddNewItem\", async () => {\n      //@ts-ignore\n      this.forms.push({\n        [this.key]: this.uuid\n      });\n      this.uuid -= 1;\n      this.setForms([...this.forms]);\n      console.log(this.forms);\n    });\n\n    _defineProperty(this, \"handleSaveChanges\", async () => {\n      //console.log(this.forms)\n      //this.setForms([...this.forms]);\n      return true;\n    });\n\n    _defineProperty(this, \"handleGenerateKey\", item => {\n      //@ts-ignore\n      return `Residence${item[this.key]}`;\n    });\n\n    _defineProperty(this, \"handleDelete\", async index => {\n      console.log(index);\n      console.log(this.forms); //@ts-ignore\n\n      const objId = this.forms[index][this.key];\n\n      if (objId !== undefined && isValidId(objId)) {\n        const response = await residencesController.delete(objId);\n\n        if (!response) {\n          return false;\n        }\n      }\n\n      setTimeout(() => {\n        //@ts-ignore\n        const filteredResults = this.forms.filter(item => item[this.key] !== objId);\n        console.log(filteredResults);\n        this.setForms(filteredResults);\n      });\n      return true;\n    });\n  }\n\n}\nexport default function ResidenceFormView(props) {\n  _s();\n\n  const {\n    0: forms,\n    1: setForms\n  } = useState([]);\n  const test = new Test(residencesController, setForms, \"residenceId\");\n\n  const handleSubmit = async () => {\n    let success = true;\n    forms.forEach(async (residence, index) => {\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\n        if (!(await handleUpdate(residence.residenceId, residence))) {\n          success = false;\n        }\n      } else {\n        if (!(await handleCreate(index, residence))) {\n          success = false;\n        }\n      }\n    });\n    return success;\n  };\n\n  const handleCreate = async (index, residence) => {\n    const residenceResponse = await residencesController.create(_objectSpread(_objectSpread({}, residence), {}, {\n      residenceId: undefined\n    }));\n\n    if (residenceResponse) {\n      //Flush Forms temp key for real key\n      const tForms = forms;\n      tForms[index] = residenceResponse;\n      setForms([]);\n      setForms(tForms);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleUpdate = async (id, residence) => {\n    const response = await residencesController.update(id, residence);\n    return response;\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormView, {\n    FormElement: ResidenceForm,\n    title: \"Residences\",\n    minNodes: 1,\n    maxNodes: 3,\n    forms: forms,\n    handleLoad: test.handleLoad,\n    handleSubmit: handleSubmit,\n    handleAddNewItem: test.handleAddNewItem,\n    handleSaveChanges: test.handleSaveChanges,\n    handleDelete: test.handleDelete,\n    handleGenerateKey: test.handleGenerateKey,\n    defaultLocked: props.defaultLocked,\n    submitButtonRef: props.submitButtonRef,\n    onNext: props.onNext,\n    hideLockButton: props.hideLockButton,\n    hideSaveProgressButton: props.hideSaveProgressButton,\n    hidePrintButton: props.hidePrintButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResidenceFormView, \"7RTkh+xsC6Rr0leUBCki3JFxIV4=\");\n\n_c = ResidenceFormView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResidenceFormView\");","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/ResidenceFormView.tsx"],"names":["React","useState","FormView","isValidId","residencesController","ResidenceForm","Test","constructor","controller","setForms","key","propertyKeyIndex","Number","MAX_SAFE_INTEGER","local","data","forms","residences","getAll","push","uuid","console","log","item","index","objId","undefined","response","delete","setTimeout","filteredResults","filter","ResidenceFormView","props","test","handleSubmit","success","forEach","residence","residenceId","handleUpdate","handleCreate","residenceResponse","create","tForms","id","update","handleLoad","handleAddNewItem","handleSaveChanges","handleDelete","handleGenerateKey","defaultLocked","submitButtonRef","onNext","hideLockButton","hideSaveProgressButton","hidePrintButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { IFormViewProps, FormView, isValidId } from 'material-ui-forms';\r\nimport Residence from '../../../models/Residence';\r\nimport residencesController, { IRepoController } from '../../../controllers/ResidenceController';\r\nimport { ResidenceForm } from './ResidenceForm';\r\n\r\nexport interface Test<T> {\r\n  handleLoad(local: boolean, data?: any): Promise<boolean>;\r\n\r\n}\r\n\r\nexport class Test<T> {\r\n  forms: T[] = [];\r\n  uuid = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(\r\n    public controller: IRepoController<T>,\r\n    public setForms: React.Dispatch<React.SetStateAction<T[]>>,\r\n    public key: string,\r\n    public propertyKeyIndex = 0,\r\n    ) {}\r\n\r\n  handleLoad = async (local: boolean, data?: any) => {\r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      const residences = await this.controller.getAll();\r\n      if (!residences) return false;\r\n      this.setForms(residences);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  handleAddNewItem = async() => {\r\n    //@ts-ignore\r\n    this.forms.push({ [this.key]: this.uuid  });\r\n    this.uuid -= 1;\r\n    this.setForms([...this.forms]);\r\n    console.log(this.forms)\r\n  }\r\n\r\n  handleSaveChanges = async () => {\r\n    //console.log(this.forms)\r\n    //this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `Residence${item[this.key]}`;\r\n  }\r\n\r\n  handleDelete = async (index: number) => {\r\n    console.log(index);\r\n    console.log(this.forms);\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.key];\r\n\r\n    if (objId !== undefined && isValidId(objId)) {\r\n      const response = await residencesController.delete(objId);\r\n      if (!response) { return false; }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\r\n      console.log(filteredResults);\r\n      this.setForms(filteredResults);\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  const [forms, setForms] = useState([] as Residence[]);\r\n  const test = new Test(residencesController, setForms, \"residenceId\");\r\n\r\n  const handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    forms.forEach(async (residence, index) => {\r\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\r\n        if (!await handleUpdate(residence.residenceId, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await handleCreate(index, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  const handleCreate = async (index: number, residence: Residence): Promise<boolean> => {\r\n    const residenceResponse = await residencesController.create({ ...residence, residenceId: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n      const tForms = forms;\r\n      tForms[index] = residenceResponse\r\n      setForms([])\r\n      setForms(tForms);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const handleUpdate = async (id: number, residence: Residence): Promise<boolean> => {\r\n    const response = await residencesController.update(id, residence);\r\n    return response;\r\n  }\r\n\r\n  return (\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={forms}\r\n      handleLoad={test.handleLoad}\r\n      handleSubmit={handleSubmit}\r\n      handleAddNewItem={test.handleAddNewItem}\r\n      handleSaveChanges={test.handleSaveChanges}\r\n      handleDelete={test.handleDelete}\r\n      handleGenerateKey={test.handleGenerateKey}\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}