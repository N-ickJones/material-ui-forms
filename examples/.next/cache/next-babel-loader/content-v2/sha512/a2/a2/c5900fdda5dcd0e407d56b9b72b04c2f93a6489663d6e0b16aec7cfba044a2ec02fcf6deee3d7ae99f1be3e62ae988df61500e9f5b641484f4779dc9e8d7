{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport class MockApi {\n  constructor(key) {\n    this.key = key;\n\n    _defineProperty(this, \"idRegex\", /\\d+/g);\n  }\n\n  getId(url) {\n    try {\n      const match = url.match(this.idRegex);\n\n      if (match && match.length > 0) {\n        const test = parseInt(match[0]);\n        return test;\n      }\n    } catch {\n      console.log('failed to get Id');\n    }\n\n    return null;\n  }\n\n  async get(url) {\n    const id = this.getId(url);\n\n    if (id === null) {\n      return {\n        status: 200,\n        data: this.getData()\n      };\n    } else {\n      return {\n        status: 200,\n        data: this.getDataById(id)\n      };\n    }\n  }\n\n  async post(url, postData) {\n    const data = this.getData();\n    const nextIndex = data.length;\n    data.push(_objectSpread(_objectSpread({}, postData), {}, {\n      [this.key]: nextIndex\n    }));\n    this.setData(data);\n    return {\n      status: 201,\n      data: this.getDataById(nextIndex)\n    };\n  }\n\n  async put(url, updateData) {\n    const id = this.getId(url);\n    const data = this.getData();\n\n    if (id !== null && data.length > id) {\n      const index = data.findIndex(item => {\n        return item[this.key] === id;\n      });\n      data[index] = updateData;\n      this.setData(data);\n      return {\n        status: 204,\n        data: null\n      };\n    } else return {\n      status: 404,\n      data: null\n    };\n  }\n\n  async delete(url) {\n    const id = this.getId(url);\n    const data = this.getData();\n\n    if (id !== null) {\n      const deleteItem = data.find(item => {\n        return item[this.key] === id;\n      });\n      const updatedData = data.filter((item, _) => {\n        return item !== deleteItem;\n      });\n      this.setData(updatedData);\n      return {\n        status: 200,\n        data: deleteItem\n      };\n    } else return {\n      status: 404,\n      data: null\n    };\n  }\n\n  getData() {\n    try {\n      const json = localStorage.getItem(`${this.key}mockApi`);\n\n      if (json) {\n        const data = JSON.parse(json);\n        if (data) return data;\n      }\n    } catch {\n      console.log(`unable to load data from localstorage: key ${this.key}mockApi`);\n    }\n\n    return [];\n  }\n\n  getDataById(id) {\n    try {\n      const json = localStorage.getItem(`${this.key}mockApi`);\n\n      if (json) {\n        const data = JSON.parse(json);\n\n        if (data && data.length > id) {\n          return data[id];\n        }\n      }\n    } catch {\n      console.log(`unable to load data from localstorage: key ${this.key}mockApi`);\n    }\n\n    return null;\n  }\n\n  setData(data) {\n    try {\n      localStorage.setItem(`${this.key}mockApi`, JSON.stringify(data));\n      return true;\n    } catch {\n      console.log(`Unable to update localstorage key: ${this.key}mockApi`);\n      return false;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/node_library/material-ui-forms/examples/src/mockApi/mockApi.ts"],"names":["MockApi","constructor","key","getId","url","match","idRegex","length","test","parseInt","console","log","get","id","status","data","getData","getDataById","post","postData","nextIndex","push","setData","put","updateData","index","findIndex","item","delete","deleteItem","find","updatedData","filter","_","json","localStorage","getItem","JSON","parse","setItem","stringify"],"mappings":"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","sourcesContent":["\r\nexport type Response = {\r\n    status: number;\r\n    data: any;\r\n}\r\n\r\nexport interface IMockApi<T> {\r\n    get(url: string): Promise<Response>;\r\n    post(url: string, data: T): Promise<Response>;\r\n    put(url: string, data: T): Promise<Response>;\r\n    delete(url: string): Promise<Response>;\r\n}\r\n\r\nexport class MockApi<T> implements IMockApi<T> {\r\n    constructor(\r\n        private key: string\r\n    ) {}\r\n\r\n    idRegex = /\\d+/g;\r\n    getId(url: string) {\r\n        try {\r\n            const match = url.match(this.idRegex)\r\n            if (match && match.length > 0) {\r\n                const test = parseInt(match[0]);\r\n                return test;\r\n            }\r\n        }\r\n        catch { console.log('failed to get Id') }\r\n        return null;\r\n    }\r\n\r\n    async get(url: string) {\r\n        const id = this.getId(url);\r\n        if (id === null) {\r\n            return {\r\n                status: 200,\r\n                data: this.getData()\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                status: 200,\r\n                data: this.getDataById(id)\r\n            }\r\n        }\r\n    }\r\n    async post(url: string, postData: T) {\r\n        const data = this.getData();\r\n        const nextIndex = data.length;\r\n        data.push({ ...postData, [this.key]: nextIndex })\r\n        this.setData(data);\r\n        return {\r\n            status: 201, data: this.getDataById(nextIndex)\r\n        }\r\n    }\r\n\r\n    async put(url: string, updateData: T) {\r\n        const id = this.getId(url);\r\n        const data = this.getData();\r\n        \r\n        if (id !== null && data.length > id) {\r\n            const index = data.findIndex((item: any) => { \r\n                return item[this.key] === id \r\n            })\r\n            data[index] = updateData;\r\n            this.setData(data);\r\n            return {\r\n                status: 204,\r\n                data: null\r\n            }\r\n        }\r\n        else return {\r\n            status: 404,\r\n            data: null\r\n        }\r\n    }\r\n\r\n    async delete(url: string) {\r\n        const id = this.getId(url);\r\n        const data = this.getData();\r\n        if (id !== null) {\r\n\r\n            const deleteItem = data.find((item: any) => { \r\n                return item[this.key] === id \r\n            })\r\n\r\n            const updatedData = data.filter((item, _) => {\r\n                return item !== deleteItem\r\n            })\r\n            this.setData(updatedData);\r\n\r\n            return {\r\n                status: 200,\r\n                data: deleteItem\r\n            }\r\n        }\r\n        else return {\r\n            status: 404,\r\n            data: null\r\n        }\r\n    }\r\n\r\n    getData(): T[] {\r\n        try {\r\n            const json = localStorage.getItem(`${this.key}mockApi`);\r\n            if (json) {\r\n                const data = JSON.parse(json) as T[];\r\n                if (data)\r\n                    return data\r\n            }\r\n        }\r\n        catch { \r\n            console.log(`unable to load data from localstorage: key ${this.key}mockApi`) \r\n        }\r\n        return [] as T[];\r\n    }\r\n\r\n    getDataById(id: number): T | null {\r\n        try {\r\n            const json = localStorage.getItem(`${this.key}mockApi`);\r\n            if (json) {\r\n                const data = JSON.parse(json) as T[];\r\n                if (data && data.length > id) {\r\n                    return data[id]\r\n                }\r\n            }\r\n        }\r\n        catch { \r\n            console.log(`unable to load data from localstorage: key ${this.key}mockApi`) \r\n        }\r\n        return null;\r\n    }\r\n    \r\n\r\n    setData(data: T[]) {\r\n        try {\r\n            localStorage.setItem(`${this.key}mockApi`, JSON.stringify(data));\r\n            return true;\r\n        }\r\n        catch {\r\n            console.log(`Unable to update localstorage key: ${this.key}mockApi`);\r\n            return false;\r\n        }\r\n    }\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}