{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { a4, sleep } from 'material-ui-forms';\nimport { getPaperHeight, getPaperWidth, marginToPixels } from 'material-ui-forms/dist/functions/functions';\nimport { useRef, useState } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nexport function useMuiPrinting(paper, margin) {\n  _s();\n\n  const {\n    0: printMode,\n    1: setPrintMode\n  } = useState(false);\n  const pageBreaks = [];\n  const printComponentRef = useRef();\n  const inputRefs = useRef([]);\n  const defaultMargin = {\n    top: 25,\n    bottom: 25,\n    left: 25,\n    right: 25\n  };\n  const paperStyle = {\n    width: getPaperWidth(paper),\n    minHeight: getPaperHeight(paper),\n    padding: `${(margin === null || margin === void 0 ? void 0 : margin.top) || 25}mm ${(margin === null || margin === void 0 ? void 0 : margin.right) || 25}mm ${(margin === null || margin === void 0 ? void 0 : margin.bottom) || 25}mm ${(margin === null || margin === void 0 ? void 0 : margin.left) || 25}mm`\n  };\n\n  const addPageBreaks = async (paper, margin) => {\n    var _printComponentRef$cu;\n\n    const props = {\n      pageHeight: getPaperHeight(paper),\n      marginTop: marginToPixels(paper, margin.top),\n      marginBottom: marginToPixels(paper, margin.bottom)\n    };\n    const containerElementReact = (_printComponentRef$cu = printComponentRef.current) === null || _printComponentRef$cu === void 0 ? void 0 : _printComponentRef$cu.getBoundingClientRect();\n    if (!containerElementReact) return;\n    const containerTop = containerElementReact.top;\n    let currentPageBottom = props.pageHeight;\n    let previousLocation = 0;\n\n    for (let i = 0; i < inputRefs.current.length; i++) {\n      const element = inputRefs.current[i];\n      const elementTop = element === null || element === void 0 ? void 0 : element.getBoundingClientRect().bottom;\n      let location = 0;\n\n      if (elementTop) {\n        location = Math.abs(elementTop - containerTop);\n      }\n\n      if (location >= currentPageBottom - props.marginBottom) {\n        //Calculates the minimum between bottom margin and distance to bottom of the page then adds the margin top\n        const offsetMargin = Math.max(props.marginBottom, Math.abs(currentPageBottom - previousLocation)) + props.marginTop;\n\n        if (i > 0) {\n          const prevElement = inputRefs.current[i - 1];\n\n          if (prevElement) {\n            pageBreaks.push({\n              element: prevElement,\n              marginBottom: prevElement.style.marginBottom\n            });\n            prevElement.style.marginBottom = `${offsetMargin}px`;\n          }\n        } else {\n          console.log('Element does not fit on page. Cannot configure page break');\n        }\n\n        currentPageBottom += props.pageHeight;\n      }\n\n      previousLocation = location;\n    }\n  };\n\n  const onBeforeGetContent = async () => {\n    setPrintMode(true); //Find a better way to ensure order of operations...\n\n    await sleep(3000);\n    await addPageBreaks(paper || a4, margin || defaultMargin);\n  };\n\n  const onAfterPrint = async () => {\n    pageBreaks.forEach(pageBreak => {\n      pageBreak.element.style.marginBottom = pageBreak.marginBottom;\n    });\n    pageBreaks.splice(0, pageBreaks.length);\n    setPrintMode(false);\n  };\n\n  const displayPrintFunc = useReactToPrint({\n    //bodyClass: \"\",\n    content: () => printComponentRef.current || null,\n    //copyStyles: false,\n    //documentTitle: `title`,\n    //fonts: [{ family: \"\", source: \"\" }],\n    onAfterPrint: onAfterPrint,\n    onBeforeGetContent: onBeforeGetContent //onBeforePrint: () => console.log('onBeforePrint'),\n    //onPrintError: () => console.log('onPrintError?'),\n    //pageStyle: pageStyle,\n    //print: () => console.log('print'),\n    //removeAfterPrint: false,\n    //suppressErrors: false,\n    //trigger: () => console.log('trigger')\n\n  });\n\n  const displayPrint = async () => {\n    displayPrintFunc && displayPrintFunc();\n  };\n\n  const handlePrintRef = index => el => {\n    inputRefs.current[index] = el;\n  };\n\n  return [paperStyle, printComponentRef, printMode, displayPrint, handlePrintRef];\n}\n\n_s(useMuiPrinting, \"iTYTbbhd+lc2rcZRbEfyO2fLl4U=\", false, function () {\n  return [useReactToPrint];\n});","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/node_library/material-ui-forms/examples/src/tests/components/useMuiPrinting.tsx"],"names":["a4","sleep","getPaperHeight","getPaperWidth","marginToPixels","useRef","useState","useReactToPrint","useMuiPrinting","paper","margin","printMode","setPrintMode","pageBreaks","printComponentRef","inputRefs","defaultMargin","top","bottom","left","right","paperStyle","width","minHeight","padding","addPageBreaks","props","pageHeight","marginTop","marginBottom","containerElementReact","current","getBoundingClientRect","containerTop","currentPageBottom","previousLocation","i","length","element","elementTop","location","Math","abs","offsetMargin","max","prevElement","push","style","console","log","onBeforeGetContent","onAfterPrint","forEach","pageBreak","splice","displayPrintFunc","content","displayPrint","handlePrintRef","index","el"],"mappings":"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","sourcesContent":["import { a4, sleep } from 'material-ui-forms';\r\nimport { getPaperHeight, getPaperWidth, marginToPixels, PageBreakDiv } from 'material-ui-forms/dist/functions/functions';\r\nimport { PaperMargin, PaperSize } from 'material-ui-forms/dist/types/types';\r\nimport React, { useRef, useState } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\nexport function useMuiPrinting(paper?: PaperSize, margin?: PaperMargin): [\r\n    React.CSSProperties,\r\n    React.MutableRefObject<HTMLDivElement | null>,\r\n    boolean,\r\n    () => Promise<void>,\r\n    (index: number) => (el: HTMLDivElement | null) => void\r\n] {\r\n\r\n    const [printMode, setPrintMode] = useState(false);\r\n    const pageBreaks = [] as PageBreakDiv[];\r\n    const printComponentRef = useRef() as React.MutableRefObject<HTMLDivElement | null>;\r\n    const inputRefs = useRef([] as (HTMLDivElement | null)[]);\r\n    const defaultMargin = { top: 25, bottom: 25, left: 25, right: 25 } as PaperMargin\r\n\r\n    const paperStyle = {\r\n        width: getPaperWidth(paper),\r\n        minHeight: getPaperHeight(paper),\r\n        padding: `${margin?.top || 25}mm ${margin?.right || 25}mm ${margin?.bottom || 25}mm ${margin?.left || 25}mm`\r\n    } as React.CSSProperties;\r\n\r\n    const addPageBreaks = async (paper: PaperSize, margin: PaperMargin) => {\r\n        const props = {\r\n            pageHeight: getPaperHeight(paper),\r\n            marginTop: marginToPixels(paper, margin.top),\r\n            marginBottom: marginToPixels(paper, margin.bottom)\r\n        }\r\n\r\n        const containerElementReact = printComponentRef.current?.getBoundingClientRect();\r\n        if (!containerElementReact) return;\r\n\r\n        const containerTop = containerElementReact.top;\r\n        let currentPageBottom = props.pageHeight;\r\n        let previousLocation = 0;\r\n\r\n        for (let i = 0; i < inputRefs.current.length; i++) {\r\n            const element = inputRefs.current[i];\r\n            const elementTop = element?.getBoundingClientRect().bottom;\r\n\r\n            let location = 0;\r\n            if (elementTop) {\r\n                location = Math.abs(elementTop - containerTop);\r\n            }\r\n\r\n            if (location >= currentPageBottom - props.marginBottom) {\r\n                //Calculates the minimum between bottom margin and distance to bottom of the page then adds the margin top\r\n                const offsetMargin = Math.max(props.marginBottom, Math.abs(currentPageBottom - previousLocation)) + props.marginTop;\r\n                if (i > 0) {\r\n                    const prevElement = inputRefs.current[i - 1];\r\n                    if (prevElement) {\r\n                        pageBreaks.push({\r\n                            element: prevElement,\r\n                            marginBottom: prevElement.style.marginBottom\r\n                        })\r\n                        prevElement.style.marginBottom = `${offsetMargin}px`;\r\n                    }\r\n                }\r\n                else {\r\n                    console.log('Element does not fit on page. Cannot configure page break')\r\n                }\r\n                currentPageBottom += props.pageHeight;\r\n            }\r\n\r\n            previousLocation = location;\r\n        }\r\n    }\r\n\r\n    const onBeforeGetContent = async () => {\r\n        setPrintMode(true);\r\n        //Find a better way to ensure order of operations...\r\n        await sleep(3000);\r\n        await addPageBreaks(paper || a4, margin || defaultMargin);\r\n    }\r\n\r\n    const onAfterPrint = async () => {\r\n        pageBreaks.forEach((pageBreak) => {\r\n            pageBreak.element.style.marginBottom = pageBreak.marginBottom;\r\n        })\r\n        pageBreaks.splice(0, pageBreaks.length);\r\n        setPrintMode(false);\r\n    }\r\n\r\n    const displayPrintFunc = useReactToPrint({\r\n        //bodyClass: \"\",\r\n        content: () => printComponentRef.current || null,\r\n        //copyStyles: false,\r\n        //documentTitle: `title`,\r\n        //fonts: [{ family: \"\", source: \"\" }],\r\n        onAfterPrint: onAfterPrint,\r\n        onBeforeGetContent: onBeforeGetContent,\r\n        //onBeforePrint: () => console.log('onBeforePrint'),\r\n        //onPrintError: () => console.log('onPrintError?'),\r\n        //pageStyle: pageStyle,\r\n        //print: () => console.log('print'),\r\n        //removeAfterPrint: false,\r\n        //suppressErrors: false,\r\n        //trigger: () => console.log('trigger')\r\n\r\n    });\r\n    const displayPrint = async () => {\r\n        displayPrintFunc && displayPrintFunc();\r\n    }\r\n\r\n    const handlePrintRef = (index: number) => (el: HTMLDivElement | null) => {\r\n        inputRefs.current[index] = el;\r\n    }\r\n\r\n    return [paperStyle, printComponentRef, printMode, displayPrint, handlePrintRef]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}