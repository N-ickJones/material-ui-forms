{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isValidId } from \"material-ui-forms\";\nexport default class FormHandler {\n  constructor(args) {\n    _defineProperty(this, \"uuid\", Number.MAX_SAFE_INTEGER);\n\n    _defineProperty(this, \"forms\", void 0);\n\n    _defineProperty(this, \"setForms\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"controller\", void 0);\n\n    _defineProperty(this, \"handleLoad\", async (local, data) => {\n      if (local && data) {\n        this.forms = data;\n      } else {\n        const objects = await this.controller.getAll();\n        if (!objects) return false;\n        this.setForms(objects);\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"handleAddNewItem\", async () => {\n      //@ts-ignore\n      this.forms.push({\n        [this.key]: this.uuid\n      });\n      this.uuid -= 1;\n      this.setForms([...this.forms]);\n    });\n\n    _defineProperty(this, \"handleSaveChanges\", async () => {\n      this.setForms([...this.forms]);\n      return true;\n    });\n\n    _defineProperty(this, \"handleGenerateKey\", item => {\n      //@ts-ignore\n      return `Residence${item[this.key]}`;\n    });\n\n    _defineProperty(this, \"handleDelete\", async index => {\n      //@ts-ignore\n      const residenceId = this.forms[index][this.key];\n      console.log(residenceId);\n\n      if (residenceId !== undefined && isValidId(residenceId)) {\n        const response = await this.controller.delete(residenceId);\n\n        if (!response) {\n          return false;\n        }\n      }\n\n      console.log(\"beforeTimeout\", this.forms); //setTimeout(() => {\n      //@ts-ignore\n\n      const filteredResults = this.forms.filter(item => item[this.key] !== residenceId);\n      console.log(\"filteredResults\", filteredResults); //this isnt working\n\n      this.setForms(filteredResults);\n      console.log(\"afterSetState\", this.forms); //})\n\n      console.log(\"afterTimeout\", this.forms);\n      return true;\n    });\n\n    _defineProperty(this, \"handleDelete2\", async index => {\n      //@ts-ignore\n      const objId = this.forms[index][this.key];\n\n      if (objId !== undefined && isValidId(objId)) {\n        const response = await this.controller.delete(objId);\n\n        if (!response) {\n          return false;\n        }\n      }\n\n      setTimeout(() => {\n        //@ts-ignore\n        const filteredResults = this.forms.filter(item => item[this.key] !== objId);\n        this.setForms(filteredResults);\n        this.forms = filteredResults; //added\n      });\n      return true;\n    });\n\n    _defineProperty(this, \"handleCreate\", async (index, object) => {\n      const residenceResponse = await this.controller.create(_objectSpread(_objectSpread({}, object), {}, {\n        [this.key]: undefined\n      }));\n\n      if (residenceResponse) {\n        //Flush Forms temp key for real key\n        //const tForms = this.forms;\n        //tForms[index] = residenceResponse\n        this.forms[index] = residenceResponse;\n        this.setForms([]); //this.setForms(tForms);\n\n        this.setForms(this.forms);\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"handleUpdate\", async (id, object) => {\n      const response = await this.controller.update(id, object);\n      return response;\n    });\n\n    _defineProperty(this, \"handleSubmit\", async () => {\n      let success = true;\n      console.log(this.forms);\n      this.forms.forEach(async (object, index) => {\n        //@ts-ignore\n        if (object[this.key] !== undefined && isValidId(object[this.key])) {\n          //@ts-ignore\n          if (!(await this.handleUpdate(object[this.key], object))) {\n            success = false;\n          }\n        } else {\n          if (!(await this.handleCreate(index, object))) {\n            success = false;\n          }\n        }\n      });\n      return success;\n    });\n\n    this.controller = args.controller;\n    this.key = args.key;\n    this.forms = args.state[0];\n    this.setForms = args.state[1];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/FormHandler.tsx"],"names":["isValidId","FormHandler","constructor","args","Number","MAX_SAFE_INTEGER","local","data","forms","objects","controller","getAll","setForms","push","key","uuid","item","index","residenceId","console","log","undefined","response","delete","filteredResults","filter","objId","setTimeout","object","residenceResponse","create","id","update","success","forEach","handleUpdate","handleCreate","state"],"mappings":"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","sourcesContent":["import { isValidId } from \"material-ui-forms\";\r\nimport { IRepoController } from \"../../../controllers/ResidenceController\";\r\n\r\n//export interface IFormHandler<T> {\r\n//  handleLoad(local: boolean, data?: any): Promise<boolean>;\r\n//}\r\n\r\nexport type FormArgs<T> = {\r\n  controller: IRepoController<T>,\r\n  key: string,\r\n  state: [T[], React.Dispatch<React.SetStateAction<T[]>>]\r\n}\r\n\r\nexport default class FormHandler<T> {\r\n  constructor(args: FormArgs<T>) {\r\n    this.controller = args.controller;\r\n    this.key = args.key;\r\n    this.forms = args.state[0];\r\n    this.setForms = args.state[1];\r\n  }\r\n  uuid = Number.MAX_SAFE_INTEGER;\r\n  forms: T[];\r\n  setForms: React.Dispatch<React.SetStateAction<T[]>>;\r\n  key: string;\r\n  controller: IRepoController<T>\r\n\r\n  handleLoad = async (local: boolean, data?: any) => {\r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      const objects = await this.controller.getAll();\r\n      if (!objects) return false;\r\n      this.setForms(objects);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  handleAddNewItem = async() => {\r\n    //@ts-ignore\r\n    this.forms.push({ [this.key]: this.uuid  });\r\n    this.uuid -= 1;\r\n    this.setForms([...this.forms]);\r\n  }\r\n\r\n  handleSaveChanges = async () => {\r\n    this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    //@ts-ignore\r\n    return `Residence${item[this.key]}`;\r\n  }\r\n\r\n  handleDelete = async (index: number): Promise<boolean> => {\r\n    //@ts-ignore\r\n    const residenceId = this.forms[index][this.key];\r\n\r\n    console.log(residenceId);\r\n\r\n    if (residenceId !== undefined && isValidId(residenceId)) {\r\n      const response = await this.controller.delete(residenceId);\r\n      if (!response) { return false; }\r\n    }\r\n\r\n    console.log(\"beforeTimeout\", this.forms);\r\n\r\n    //setTimeout(() => {\r\n\r\n      //@ts-ignore\r\n      const filteredResults = this.forms.filter((item) => item[this.key]  !== residenceId);\r\n      console.log(\"filteredResults\", filteredResults);\r\n\r\n      //this isnt working\r\n      this.setForms(filteredResults);\r\n      console.log(\"afterSetState\", this.forms);\r\n    //})\r\n\r\n    console.log(\"afterTimeout\", this.forms);\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  handleDelete2 = async (index: number) => {\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.key];\r\n    if (objId !== undefined && isValidId(objId)) {\r\n      const response = await this.controller.delete(objId);\r\n      if (!response) { return false; }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      const filteredResults = this.forms.filter((item) => item[this.key] !== objId);\r\n      this.setForms(filteredResults);\r\n      this.forms = filteredResults; //added\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n  handleCreate = async (index: number, object: T): Promise<boolean> => {\r\n    const residenceResponse = await this.controller.create({ ...object, [this.key]: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n\r\n      //const tForms = this.forms;\r\n      //tForms[index] = residenceResponse\r\n      this.forms[index] = residenceResponse;\r\n\r\n      this.setForms([])\r\n\r\n      //this.setForms(tForms);\r\n      this.setForms(this.forms);\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleUpdate = async (id: number, object: T): Promise<boolean> => {\r\n    const response = await this.controller.update(id, object);\r\n    return response;\r\n  }\r\n\r\n  handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    console.log(this.forms);\r\n    this.forms.forEach(async (object: T, index: number) => {\r\n      //@ts-ignore\r\n      if (object[this.key] !== undefined && isValidId(object[this.key])) {\r\n        //@ts-ignore\r\n        if (!await this.handleUpdate(object[this.key], object)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await this.handleCreate(index, object)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}