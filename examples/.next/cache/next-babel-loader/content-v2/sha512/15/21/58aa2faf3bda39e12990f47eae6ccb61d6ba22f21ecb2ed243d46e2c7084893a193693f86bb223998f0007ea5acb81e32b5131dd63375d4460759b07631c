{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\armyj\\\\Documents\\\\GitHub\\\\material-ui-forms\\\\examples\\\\src\\\\components\\\\forms\\\\new\\\\ResidenceFormView.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { FormView, isValidId } from 'material-ui-forms';\nimport residencesController from '../../../controllers/ResidenceController';\nimport { ResidenceForm } from './ResidenceForm';\nexport class Test {\n  constructor(controller, setForms, propertyKeyIndex = 0) {\n    this.controller = controller;\n    this.setForms = setForms;\n    this.propertyKeyIndex = propertyKeyIndex;\n\n    _defineProperty(this, \"forms\", []);\n\n    _defineProperty(this, \"handleGenerateKey\", item => {\n      const keys = Object.keys(this.forms);\n      console.log(keys); //@ts-ignore\n\n      return `Residence${item[keys[this.propertyKeyIndex]]}`;\n    });\n  }\n\n  async handleLoad(local, data) {\n    if (local && data) {\n      this.forms = data;\n    } else {\n      console.log(this.controller); //const residences = await this.controller.getAll();\n      //if (!residences) return false;\n      //this.setForms(residences);\n    }\n\n    return true;\n  }\n\n  async handleSaveChanges() {\n    console.log(this.forms);\n    this.setForms([...this.forms]);\n    return true;\n  }\n\n  async handleDelete(index) {\n    //@ts-ignore\n    const objId = this.forms[index][this.propertyKeyIndex];\n\n    if (objId !== undefined && isValidId(objId)) {\n      const response = await residencesController.delete(objId);\n\n      if (!response) {\n        return false;\n      }\n    }\n\n    setTimeout(() => {\n      //@ts-ignore\n      const filteredResults = this.forms.filter(item => item[this.propertyKeyIndex] !== objId);\n      this.setForms(filteredResults);\n    });\n    return true;\n  }\n\n}\nexport default function ResidenceFormView(props) {\n  _s();\n\n  const {\n    0: forms,\n    1: setForms\n  } = useState([]); //const controller = ; //\n\n  const test = new Test(residencesController, setForms);\n  const {\n    0: uid,\n    1: setUid\n  } = useState(Number.MAX_SAFE_INTEGER);\n\n  const handleAddNewItem = async () => {\n    forms.push({\n      residenceId: uid\n    });\n    setUid(curr => curr - 1);\n    setForms([...forms]);\n  };\n\n  const handleSubmit = async () => {\n    let success = true;\n    forms.forEach(async (residence, index) => {\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\n        if (!(await handleUpdate(residence.residenceId, residence))) {\n          success = false;\n        }\n      } else {\n        if (!(await handleCreate(index, residence))) {\n          success = false;\n        }\n      }\n    });\n    return success;\n  };\n\n  const handleCreate = async (index, residence) => {\n    const residenceResponse = await residencesController.create(_objectSpread(_objectSpread({}, residence), {}, {\n      residenceId: undefined\n    }));\n\n    if (residenceResponse) {\n      //Flush Forms temp key for real key\n      const tForms = forms;\n      tForms[index] = residenceResponse;\n      setForms([]);\n      setForms(tForms);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleUpdate = async (id, residence) => {\n    const response = await residencesController.update(id, residence);\n    return response;\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormView, {\n    FormElement: ResidenceForm,\n    title: \"Residences\",\n    minNodes: 1,\n    maxNodes: 3,\n    forms: forms,\n    handleLoad: test.handleLoad,\n    handleSubmit: handleSubmit,\n    handleAddNewItem: handleAddNewItem,\n    handleSaveChanges: test.handleSaveChanges,\n    handleDelete: test.handleDelete,\n    handleGenerateKey: test.handleGenerateKey,\n    defaultLocked: props.defaultLocked,\n    submitButtonRef: props.submitButtonRef,\n    onNext: props.onNext,\n    hideLockButton: props.hideLockButton,\n    hideSaveProgressButton: props.hideSaveProgressButton,\n    hidePrintButton: props.hidePrintButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResidenceFormView, \"AAzx5zi/7p30XLtU/03Gnb1Dly4=\");\n\n_c = ResidenceFormView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResidenceFormView\");","map":{"version":3,"sources":["C:/Users/armyj/Documents/GitHub/material-ui-forms/examples/src/components/forms/new/ResidenceFormView.tsx"],"names":["React","useState","FormView","isValidId","residencesController","ResidenceForm","Test","constructor","controller","setForms","propertyKeyIndex","item","keys","Object","forms","console","log","handleLoad","local","data","handleSaveChanges","handleDelete","index","objId","undefined","response","delete","setTimeout","filteredResults","filter","ResidenceFormView","props","test","uid","setUid","Number","MAX_SAFE_INTEGER","handleAddNewItem","push","residenceId","curr","handleSubmit","success","forEach","residence","handleUpdate","handleCreate","residenceResponse","create","tForms","id","update","handleGenerateKey","defaultLocked","submitButtonRef","onNext","hideLockButton","hideSaveProgressButton","hidePrintButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { IFormViewProps, FormView, isValidId } from 'material-ui-forms';\r\nimport Residence from '../../../models/Residence';\r\nimport residencesController, { IRepoController, IResidencesController, ResidencesController } from '../../../controllers/ResidenceController';\r\nimport { ResidenceForm } from './ResidenceForm';\r\n\r\nexport interface Test<T> {\r\n  handleLoad(local: boolean, data?: any): Promise<boolean>;\r\n\r\n}\r\n\r\nexport class Test<T> {\r\n  constructor(\r\n    public controller: IRepoController<T>,\r\n    public setForms: React.Dispatch<React.SetStateAction<T[]>>,\r\n    public propertyKeyIndex = 0\r\n    ) {}\r\n\r\n  forms: T[] = [];\r\n\r\n  async handleLoad(local: boolean, data?: any) {\r\n    if (local && data) {\r\n      this.forms = data;\r\n    }\r\n    else {\r\n      console.log(this.controller);\r\n      //const residences = await this.controller.getAll();\r\n      //if (!residences) return false;\r\n      //this.setForms(residences);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async handleSaveChanges() : Promise<boolean> {\r\n    console.log(this.forms)\r\n    this.setForms([...this.forms]);\r\n    return true;\r\n  }\r\n\r\n  handleGenerateKey = (item: T) => {\r\n    const keys = Object.keys(this.forms);\r\n    console.log(keys)\r\n    //@ts-ignore\r\n    return `Residence${item[keys[this.propertyKeyIndex]]}`;\r\n  }\r\n\r\n  async handleDelete(index: number): Promise<boolean> {\r\n    //@ts-ignore\r\n    const objId = this.forms[index][this.propertyKeyIndex];\r\n\r\n    if (objId !== undefined && isValidId(objId)) {\r\n      const response = await residencesController.delete(objId);\r\n      if (!response) { return false; }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      //@ts-ignore\r\n      const filteredResults = this.forms.filter((item) => item[this.propertyKeyIndex] !== objId);\r\n      this.setForms(filteredResults);\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default function ResidenceFormView(props: IFormViewProps) {\r\n  const [forms, setForms] = useState([] as Residence[]);\r\n  //const controller = ; //\r\n  const test = new Test<Residence>(residencesController, setForms)\r\n\r\n  const [uid, setUid] = useState(Number.MAX_SAFE_INTEGER);\r\n\r\n  const handleAddNewItem = async () => {\r\n    forms.push({ residenceId: uid  } as Residence);\r\n    setUid(curr => curr - 1);\r\n    setForms([...forms]);\r\n  }\r\n\r\n  const handleSubmit = async (): Promise<boolean> => {\r\n    let success = true;\r\n    forms.forEach(async (residence, index) => {\r\n      if (residence.residenceId !== undefined && isValidId(residence.residenceId)) {\r\n        if (!await handleUpdate(residence.residenceId, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n      else {\r\n        if (!await handleCreate(index, residence)) {\r\n          success = false;\r\n        }\r\n      }\r\n    });\r\n    return success;\r\n  }\r\n\r\n  const handleCreate = async (index: number, residence: Residence): Promise<boolean> => {\r\n    const residenceResponse = await residencesController.create({ ...residence, residenceId: undefined });\r\n    if (residenceResponse) {\r\n      //Flush Forms temp key for real key\r\n      const tForms = forms;\r\n      tForms[index] = residenceResponse\r\n      setForms([])\r\n      setForms(tForms);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const handleUpdate = async (id: number, residence: Residence): Promise<boolean> => {\r\n    const response = await residencesController.update(id, residence);\r\n    return response;\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <FormView<Residence>\r\n      FormElement={ResidenceForm}\r\n      title={\"Residences\"}\r\n      minNodes={1}\r\n      maxNodes={3}\r\n      forms={forms}\r\n      handleLoad={test.handleLoad}\r\n      handleSubmit={handleSubmit}\r\n      handleAddNewItem={handleAddNewItem}\r\n      handleSaveChanges={test.handleSaveChanges}\r\n      handleDelete={test.handleDelete}\r\n      handleGenerateKey={test.handleGenerateKey}\r\n      defaultLocked={props.defaultLocked}\r\n      submitButtonRef={props.submitButtonRef}\r\n      onNext={props.onNext}\r\n      hideLockButton={props.hideLockButton}\r\n      hideSaveProgressButton={props.hideSaveProgressButton}\r\n      hidePrintButton={props.hidePrintButton}\r\n    />\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}