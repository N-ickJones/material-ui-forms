export var define: (obj: any, key: any, val: any) => any;
export var diff: (arr: any, ...args: any[]) => any;
export var extend: {
    <T, U>(target: T, source: U): T & U;
    <T_1, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;
    <T_2, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;
    (target: object, ...sources: any[]): any;
};
export var pick: (obj: any, keys: any) => {};
export var typeOf: (val: any) => string;
export var unique: {
    (arr: any): any[];
    immutable: (arr: any) => any[];
};
export function isWindows(): boolean;
export function instantiate(ast: any, options: any): any;
export function createKey(pattern: any, options: any): any;
export function arrayify(val: any): any[];
export function isString(val: any): boolean;
export function isObject(val: any): boolean;
export function hasSpecialChars(str: any): boolean;
export function escapeRegex(str: any): any;
export function toPosixPath(str: any): string;
export function unescape(str: string): string;
export function stripPrefix(str: any): string;
export function isSlash(str: any): boolean;
export function matchPath(pattern: string, options: any): Function;
export function _equals(filepath: any, unixPath: any, pattern: any): boolean;
export function _contains(filepath: any, unixPath: any, pattern: any): boolean;
export function equalsPattern(pattern: string, options: any): Function;
export function containsPattern(pattern: string, options: any): Function;
export function matchBasename(re: RegExp): Function;
export function value(str: any, unixify: any, options: any): any;
export function unixify(options: any): Function;
